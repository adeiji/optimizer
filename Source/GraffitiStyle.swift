//
//  GraffitiStyle.swift
//  Graffiti
//
//  Created by Adebayo Ijidakinro on 7/25/18.
//  Copyright Â© 2018 Dephyned. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class GraffitiStyle : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawAddTagCamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let mainButtonColor = UIColor(red: 0.376, green: 0.376, blue: 0.376, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.4)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 58, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 58), controlPoint1: CGPoint(x: 58, y: 45.02), controlPoint2: CGPoint(x: 45.02, y: 58))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 29), controlPoint1: CGPoint(x: 12.98, y: 58), controlPoint2: CGPoint(x: 0, y: 45.02))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0, y: 12.98), controlPoint2: CGPoint(x: 12.98, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 58, y: 29), controlPoint1: CGPoint(x: 45.02, y: 0), controlPoint2: CGPoint(x: 58, y: 12.98))
        bezierPath.close()
        mainButtonColor.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 22.3, y: 20.38))
        bezier2Path.addCurve(to: CGPoint(x: 23.04, y: 19.8), controlPoint1: CGPoint(x: 22.66, y: 20.38), controlPoint2: CGPoint(x: 22.96, y: 20.14))
        bezier2Path.addLine(to: CGPoint(x: 23.29, y: 18.7))
        bezier2Path.addCurve(to: CGPoint(x: 26.21, y: 16.39), controlPoint1: CGPoint(x: 23.61, y: 17.34), controlPoint2: CGPoint(x: 24.81, y: 16.39))
        bezier2Path.addLine(to: CGPoint(x: 30.58, y: 16.39))
        bezier2Path.addCurve(to: CGPoint(x: 33.49, y: 18.7), controlPoint1: CGPoint(x: 31.98, y: 16.39), controlPoint2: CGPoint(x: 33.17, y: 17.34))
        bezier2Path.addLine(to: CGPoint(x: 33.75, y: 19.8))
        bezier2Path.addCurve(to: CGPoint(x: 34.48, y: 20.38), controlPoint1: CGPoint(x: 33.83, y: 20.14), controlPoint2: CGPoint(x: 34.13, y: 20.38))
        bezier2Path.addLine(to: CGPoint(x: 39.99, y: 20.38))
        bezier2Path.addCurve(to: CGPoint(x: 41.98, y: 22.38), controlPoint1: CGPoint(x: 41.09, y: 20.38), controlPoint2: CGPoint(x: 41.98, y: 21.28))
        bezier2Path.addLine(to: CGPoint(x: 41.98, y: 35.71))
        bezier2Path.addCurve(to: CGPoint(x: 39.81, y: 37.88), controlPoint1: CGPoint(x: 41.98, y: 36.91), controlPoint2: CGPoint(x: 41.01, y: 37.88))
        bezier2Path.addLine(to: CGPoint(x: 16.98, y: 37.88))
        bezier2Path.addCurve(to: CGPoint(x: 14.8, y: 35.71), controlPoint1: CGPoint(x: 15.78, y: 37.88), controlPoint2: CGPoint(x: 14.8, y: 36.91))
        bezier2Path.addLine(to: CGPoint(x: 14.8, y: 22.38))
        bezier2Path.addCurve(to: CGPoint(x: 16.8, y: 20.38), controlPoint1: CGPoint(x: 14.8, y: 21.28), controlPoint2: CGPoint(x: 15.7, y: 20.38))
        bezier2Path.addLine(to: CGPoint(x: 22.3, y: 20.38))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 13.29, y: 22.38))
        bezier2Path.addLine(to: CGPoint(x: 13.29, y: 35.71))
        bezier2Path.addCurve(to: CGPoint(x: 16.98, y: 39.4), controlPoint1: CGPoint(x: 13.29, y: 37.74), controlPoint2: CGPoint(x: 14.94, y: 39.4))
        bezier2Path.addLine(to: CGPoint(x: 39.81, y: 39.4))
        bezier2Path.addCurve(to: CGPoint(x: 43.5, y: 35.71), controlPoint1: CGPoint(x: 41.85, y: 39.4), controlPoint2: CGPoint(x: 43.5, y: 37.74))
        bezier2Path.addLine(to: CGPoint(x: 43.5, y: 22.38))
        bezier2Path.addCurve(to: CGPoint(x: 39.99, y: 18.87), controlPoint1: CGPoint(x: 43.5, y: 20.45), controlPoint2: CGPoint(x: 41.93, y: 18.87))
        bezier2Path.addLine(to: CGPoint(x: 35.09, y: 18.87))
        bezier2Path.addLine(to: CGPoint(x: 34.97, y: 18.36))
        bezier2Path.addCurve(to: CGPoint(x: 30.58, y: 14.88), controlPoint1: CGPoint(x: 34.49, y: 16.31), controlPoint2: CGPoint(x: 32.69, y: 14.88))
        bezier2Path.addLine(to: CGPoint(x: 26.21, y: 14.88))
        bezier2Path.addCurve(to: CGPoint(x: 21.82, y: 18.36), controlPoint1: CGPoint(x: 24.11, y: 14.88), controlPoint2: CGPoint(x: 22.3, y: 16.31))
        bezier2Path.addLine(to: CGPoint(x: 21.7, y: 18.87))
        bezier2Path.addLine(to: CGPoint(x: 16.8, y: 18.87))
        bezier2Path.addCurve(to: CGPoint(x: 13.29, y: 22.38), controlPoint1: CGPoint(x: 14.86, y: 18.87), controlPoint2: CGPoint(x: 13.29, y: 20.45))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 17.4, y: 22.7, width: 1.7, height: 1.7))
        fillColor2.setFill()
        ovalPath.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 28.4, y: 24.34))
        bezier3Path.addCurve(to: CGPoint(x: 33.23, y: 29.17), controlPoint1: CGPoint(x: 31.06, y: 24.34), controlPoint2: CGPoint(x: 33.23, y: 26.51))
        bezier3Path.addCurve(to: CGPoint(x: 28.4, y: 34.01), controlPoint1: CGPoint(x: 33.23, y: 31.84), controlPoint2: CGPoint(x: 31.06, y: 34.01))
        bezier3Path.addCurve(to: CGPoint(x: 23.56, y: 29.17), controlPoint1: CGPoint(x: 25.73, y: 34.01), controlPoint2: CGPoint(x: 23.56, y: 31.84))
        bezier3Path.addCurve(to: CGPoint(x: 28.4, y: 24.34), controlPoint1: CGPoint(x: 23.56, y: 26.51), controlPoint2: CGPoint(x: 25.73, y: 24.34))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 28.4, y: 35.52))
        bezier3Path.addCurve(to: CGPoint(x: 34.74, y: 29.17), controlPoint1: CGPoint(x: 31.89, y: 35.52), controlPoint2: CGPoint(x: 34.74, y: 32.67))
        bezier3Path.addCurve(to: CGPoint(x: 28.4, y: 22.83), controlPoint1: CGPoint(x: 34.74, y: 25.68), controlPoint2: CGPoint(x: 31.89, y: 22.83))
        bezier3Path.addCurve(to: CGPoint(x: 22.05, y: 29.17), controlPoint1: CGPoint(x: 24.9, y: 22.83), controlPoint2: CGPoint(x: 22.05, y: 25.67))
        bezier3Path.addCurve(to: CGPoint(x: 28.4, y: 35.52), controlPoint1: CGPoint(x: 22.05, y: 32.68), controlPoint2: CGPoint(x: 24.9, y: 35.52))
        bezier3Path.close()
        fillColor2.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAddPlusSign(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.5, y: 20.3))
        bezierPath.addLine(to: CGPoint(x: 24.5, y: 30.7))
        fillColor6.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29.7, y: 25.5))
        bezier2Path.addLine(to: CGPoint(x: 19.3, y: 25.5))
        fillColor6.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 24.5, y: 15.1))
        bezier3Path.addLine(to: CGPoint(x: 24.5, y: 35.9))
        fillColor6.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 34.9, y: 25.5))
        bezier4Path.addLine(to: CGPoint(x: 14.1, y: 25.5))
        fillColor6.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMessageBubble(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.14, y: 10.1))
        bezierPath.addCurve(to: CGPoint(x: 8.2, y: 19.95), controlPoint1: CGPoint(x: 13.11, y: 10.1), controlPoint2: CGPoint(x: 8.2, y: 14.52))
        bezierPath.addCurve(to: CGPoint(x: 9.93, y: 25.28), controlPoint1: CGPoint(x: 8.2, y: 21.85), controlPoint2: CGPoint(x: 8.8, y: 23.69))
        bezierPath.addCurve(to: CGPoint(x: 8.3, y: 30.28), controlPoint1: CGPoint(x: 9.72, y: 27.67), controlPoint2: CGPoint(x: 9.14, y: 29.44))
        bezierPath.addCurve(to: CGPoint(x: 8.23, y: 30.7), controlPoint1: CGPoint(x: 8.19, y: 30.39), controlPoint2: CGPoint(x: 8.16, y: 30.56))
        bezierPath.addCurve(to: CGPoint(x: 8.56, y: 30.9), controlPoint1: CGPoint(x: 8.29, y: 30.82), controlPoint2: CGPoint(x: 8.42, y: 30.9))
        bezierPath.addCurve(to: CGPoint(x: 8.61, y: 30.9), controlPoint1: CGPoint(x: 8.58, y: 30.9), controlPoint2: CGPoint(x: 8.59, y: 30.9))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 28.95), controlPoint1: CGPoint(x: 8.76, y: 30.87), controlPoint2: CGPoint(x: 12.19, y: 30.38))
        bezierPath.addCurve(to: CGPoint(x: 19.14, y: 29.8), controlPoint1: CGPoint(x: 16.08, y: 29.52), controlPoint2: CGPoint(x: 17.59, y: 29.8))
        bezierPath.addCurve(to: CGPoint(x: 30.09, y: 19.95), controlPoint1: CGPoint(x: 25.18, y: 29.8), controlPoint2: CGPoint(x: 30.09, y: 25.39))
        bezierPath.addCurve(to: CGPoint(x: 19.14, y: 10.1), controlPoint1: CGPoint(x: 30.09, y: 14.52), controlPoint2: CGPoint(x: 25.18, y: 10.1))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        fillColor6.setStroke()
        bezierPath.lineWidth = 0
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLocationMarker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.59, y: 20.21))
        bezierPath.addCurve(to: CGPoint(x: 16.7, y: 17.81), controlPoint1: CGPoint(x: 17.99, y: 20.21), controlPoint2: CGPoint(x: 16.7, y: 19.13))
        bezierPath.addCurve(to: CGPoint(x: 19.59, y: 15.41), controlPoint1: CGPoint(x: 16.7, y: 16.48), controlPoint2: CGPoint(x: 17.99, y: 15.41))
        bezierPath.addCurve(to: CGPoint(x: 22.47, y: 17.81), controlPoint1: CGPoint(x: 21.18, y: 15.41), controlPoint2: CGPoint(x: 22.47, y: 16.48))
        bezierPath.addCurve(to: CGPoint(x: 19.59, y: 20.21), controlPoint1: CGPoint(x: 22.47, y: 19.13), controlPoint2: CGPoint(x: 21.18, y: 20.21))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.68, y: 12.74))
        bezierPath.addLine(to: CGPoint(x: 25.68, y: 12.74))
        bezierPath.addCurve(to: CGPoint(x: 13.32, y: 12.74), controlPoint1: CGPoint(x: 22.27, y: 9.9), controlPoint2: CGPoint(x: 16.73, y: 9.9))
        bezierPath.addCurve(to: CGPoint(x: 12.51, y: 23.01), controlPoint1: CGPoint(x: 10.25, y: 15.3), controlPoint2: CGPoint(x: 9.9, y: 20.11))
        bezierPath.addLine(to: CGPoint(x: 18.12, y: 29.74))
        bezierPath.addCurve(to: CGPoint(x: 20.88, y: 29.74), controlPoint1: CGPoint(x: 18.84, y: 30.61), controlPoint2: CGPoint(x: 20.16, y: 30.61))
        bezierPath.addLine(to: CGPoint(x: 26.49, y: 23.01))
        bezierPath.addCurve(to: CGPoint(x: 25.68, y: 12.74), controlPoint1: CGPoint(x: 29.1, y: 20.11), controlPoint2: CGPoint(x: 28.75, y: 15.3))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.43, y: 14.13))
        bezierPath.addCurve(to: CGPoint(x: 24.85, y: 10.46), controlPoint1: CGPoint(x: 20.35, y: 11.97), controlPoint2: CGPoint(x: 22.43, y: 10.46))
        bezierPath.addCurve(to: CGPoint(x: 30.77, y: 16.58), controlPoint1: CGPoint(x: 28.12, y: 10.46), controlPoint2: CGPoint(x: 30.47, y: 13.25))
        bezierPath.addCurve(to: CGPoint(x: 30.57, y: 18.9), controlPoint1: CGPoint(x: 30.77, y: 16.58), controlPoint2: CGPoint(x: 30.93, y: 17.41))
        bezierPath.addCurve(to: CGPoint(x: 27.46, y: 24.1), controlPoint1: CGPoint(x: 30.1, y: 20.92), controlPoint2: CGPoint(x: 28.97, y: 22.72))
        bezierPath.addLine(to: CGPoint(x: 20.82, y: 30.02))
        bezierPath.addCurve(to: CGPoint(x: 18.06, y: 30.01), controlPoint1: CGPoint(x: 20.03, y: 30.72), controlPoint2: CGPoint(x: 18.84, y: 30.72))
        bezierPath.addLine(to: CGPoint(x: 11.54, y: 24.1))
        bezierPath.addCurve(to: CGPoint(x: 8.43, y: 18.89), controlPoint1: CGPoint(x: 10.03, y: 22.72), controlPoint2: CGPoint(x: 8.9, y: 20.92))
        bezierPath.addCurve(to: CGPoint(x: 8.23, y: 16.58), controlPoint1: CGPoint(x: 8.07, y: 17.41), controlPoint2: CGPoint(x: 8.23, y: 16.58))
        bezierPath.addCurve(to: CGPoint(x: 14.15, y: 10.46), controlPoint1: CGPoint(x: 8.53, y: 13.25), controlPoint2: CGPoint(x: 10.88, y: 10.46))
        bezierPath.addCurve(to: CGPoint(x: 19.43, y: 14.13), controlPoint1: CGPoint(x: 16.57, y: 10.46), controlPoint2: CGPoint(x: 18.52, y: 11.97))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSendArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17.23, y: 29.71))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 22.1))
        bezierPath.addLine(to: CGPoint(x: 29.12, y: 12.77))
        bezierPath.addLine(to: CGPoint(x: 17.23, y: 29.71))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.33, y: 16.24))
        bezierPath.addLine(to: CGPoint(x: 28.58, y: 11.97))
        bezierPath.addLine(to: CGPoint(x: 14.46, y: 21.29))
        bezierPath.addLine(to: CGPoint(x: 8.33, y: 16.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 31.43, y: 11.04))
        bezierPath.addCurve(to: CGPoint(x: 31.43, y: 10.92), controlPoint1: CGPoint(x: 31.44, y: 11), controlPoint2: CGPoint(x: 31.44, y: 10.96))
        bezierPath.addCurve(to: CGPoint(x: 31.43, y: 10.87), controlPoint1: CGPoint(x: 31.43, y: 10.91), controlPoint2: CGPoint(x: 31.43, y: 10.89))
        bezierPath.addCurve(to: CGPoint(x: 31.37, y: 10.71), controlPoint1: CGPoint(x: 31.42, y: 10.81), controlPoint2: CGPoint(x: 31.39, y: 10.76))
        bezierPath.addCurve(to: CGPoint(x: 31.24, y: 10.58), controlPoint1: CGPoint(x: 31.33, y: 10.66), controlPoint2: CGPoint(x: 31.29, y: 10.62))
        bezierPath.addCurve(to: CGPoint(x: 31.2, y: 10.56), controlPoint1: CGPoint(x: 31.23, y: 10.58), controlPoint2: CGPoint(x: 31.21, y: 10.56))
        bezierPath.addCurve(to: CGPoint(x: 31.09, y: 10.52), controlPoint1: CGPoint(x: 31.16, y: 10.54), controlPoint2: CGPoint(x: 31.13, y: 10.53))
        bezierPath.addCurve(to: CGPoint(x: 31.03, y: 10.51), controlPoint1: CGPoint(x: 31.07, y: 10.52), controlPoint2: CGPoint(x: 31.05, y: 10.51))
        bezierPath.addCurve(to: CGPoint(x: 30.9, y: 10.51), controlPoint1: CGPoint(x: 30.99, y: 10.5), controlPoint2: CGPoint(x: 30.94, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 30.87, y: 10.51), controlPoint1: CGPoint(x: 30.89, y: 10.51), controlPoint2: CGPoint(x: 30.88, y: 10.51))
        bezierPath.addLine(to: CGPoint(x: 30.86, y: 10.51))
        bezierPath.addLine(to: CGPoint(x: 7.15, y: 15.51))
        bezierPath.addCurve(to: CGPoint(x: 6.77, y: 16.09), controlPoint1: CGPoint(x: 6.88, y: 15.57), controlPoint2: CGPoint(x: 6.72, y: 15.82))
        bezierPath.addCurve(to: CGPoint(x: 6.94, y: 16.36), controlPoint1: CGPoint(x: 6.8, y: 16.19), controlPoint2: CGPoint(x: 6.85, y: 16.29))
        bezierPath.addLine(to: CGPoint(x: 14, y: 22.17))
        bezierPath.addLine(to: CGPoint(x: 16.57, y: 30.95))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 31.29), controlPoint1: CGPoint(x: 16.62, y: 31.12), controlPoint2: CGPoint(x: 16.76, y: 31.25))
        bezierPath.addLine(to: CGPoint(x: 16.96, y: 31.29))
        bezierPath.addCurve(to: CGPoint(x: 17.43, y: 31.09), controlPoint1: CGPoint(x: 17.14, y: 31.32), controlPoint2: CGPoint(x: 17.32, y: 31.24))
        bezierPath.addLine(to: CGPoint(x: 31.36, y: 11.26))
        bezierPath.addLine(to: CGPoint(x: 31.36, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 31.37, y: 11.22), controlPoint1: CGPoint(x: 31.36, y: 11.24), controlPoint2: CGPoint(x: 31.37, y: 11.23))
        bezierPath.addCurve(to: CGPoint(x: 31.42, y: 11.1), controlPoint1: CGPoint(x: 31.39, y: 11.18), controlPoint2: CGPoint(x: 31.41, y: 11.14))
        bezierPath.addCurve(to: CGPoint(x: 31.43, y: 11.04), controlPoint1: CGPoint(x: 31.43, y: 11.08), controlPoint2: CGPoint(x: 31.44, y: 11.06))
        bezierPath.close()
        fillColor6.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 38.27, y: 23))
        bezierPath.addLine(to: CGPoint(x: 20.73, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 23.73), controlPoint1: CGPoint(x: 20.33, y: 23), controlPoint2: CGPoint(x: 20, y: 23.33))
        bezierPath.addCurve(to: CGPoint(x: 20.73, y: 24.46), controlPoint1: CGPoint(x: 20, y: 24.13), controlPoint2: CGPoint(x: 20.33, y: 24.46))
        bezierPath.addLine(to: CGPoint(x: 38.27, y: 24.46))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 23.73), controlPoint1: CGPoint(x: 38.67, y: 24.46), controlPoint2: CGPoint(x: 39, y: 24.13))
        bezierPath.addCurve(to: CGPoint(x: 38.27, y: 23), controlPoint1: CGPoint(x: 39, y: 23.33), controlPoint2: CGPoint(x: 38.67, y: 23))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 38.27, y: 29.58))
        bezier2Path.addLine(to: CGPoint(x: 20.73, y: 29.58))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 30.31), controlPoint1: CGPoint(x: 20.33, y: 29.58), controlPoint2: CGPoint(x: 20, y: 29.9))
        bezier2Path.addCurve(to: CGPoint(x: 20.73, y: 31.04), controlPoint1: CGPoint(x: 20, y: 30.71), controlPoint2: CGPoint(x: 20.33, y: 31.04))
        bezier2Path.addLine(to: CGPoint(x: 38.27, y: 31.04))
        bezier2Path.addCurve(to: CGPoint(x: 39, y: 30.31), controlPoint1: CGPoint(x: 38.67, y: 31.04), controlPoint2: CGPoint(x: 39, y: 30.71))
        bezier2Path.addCurve(to: CGPoint(x: 38.27, y: 29.58), controlPoint1: CGPoint(x: 39, y: 29.9), controlPoint2: CGPoint(x: 38.67, y: 29.58))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 38.27, y: 36.15))
        bezier3Path.addLine(to: CGPoint(x: 20.73, y: 36.15))
        bezier3Path.addCurve(to: CGPoint(x: 20, y: 36.88), controlPoint1: CGPoint(x: 20.33, y: 36.15), controlPoint2: CGPoint(x: 20, y: 36.48))
        bezier3Path.addCurve(to: CGPoint(x: 20.73, y: 37.62), controlPoint1: CGPoint(x: 20, y: 37.29), controlPoint2: CGPoint(x: 20.33, y: 37.62))
        bezier3Path.addLine(to: CGPoint(x: 38.27, y: 37.62))
        bezier3Path.addCurve(to: CGPoint(x: 39, y: 36.88), controlPoint1: CGPoint(x: 38.67, y: 37.62), controlPoint2: CGPoint(x: 39, y: 37.29))
        bezier3Path.addCurve(to: CGPoint(x: 38.27, y: 36.15), controlPoint1: CGPoint(x: 39, y: 36.48), controlPoint2: CGPoint(x: 38.67, y: 36.15))
        bezier3Path.close()
        fillColor6.setFill()
        bezier3Path.fill()


        //// Clip Drawing
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
//        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)
        let fillColor6 = UIColor.white
        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30.13, y: 36.6))
        bezierPath.addLine(to: CGPoint(x: 18.58, y: 24.6))
        fillColor6.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 18.58, y: 26.6))
        bezier2Path.addLine(to: CGPoint(x: 30.13, y: 14.6))
        fillColor6.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group
        //// Oval Drawing
        let ovalRect = CGRect(x: 4, y: 4, width: 62, height: 62)
        let ovalPath = UIBezierPath(ovalIn: ovalRect)
        fillColor6.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()
        let ovalStyle = NSMutableParagraphStyle()
        ovalStyle.alignment = .center
        let ovalFontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: ovalStyle,
            ] as [NSAttributedString.Key: Any]

        "\n".draw(in: ovalRect, withAttributes: ovalFontAttributes)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 28.65, y: 27.32)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 19.61))
        fillColor6.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 28.65, y: 41.18)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 19.61, y: 0))
        bezier2Path.addLine(to: CGPoint(x: -0, y: 0))
        fillColor6.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.stroke()

        context.restoreGState()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 21.71, y: 20.38)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -0, y: 0))
        bezier3Path.addLine(to: CGPoint(x: -0, y: 39.22))
        fillColor6.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()

        context.restoreGState()


        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: 21.72, y: 48.11)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 39.21, y: 0))
        bezier4Path.addLine(to: CGPoint(x: -0, y: 0))
        fillColor6.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 62, height: 62))
        fillColor6.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 48.18, y: 32.73))
        bezierPath.addLine(to: CGPoint(x: 46.1, y: 32.38))
        bezierPath.addCurve(to: CGPoint(x: 45.26, y: 30.36), controlPoint1: CGPoint(x: 45.88, y: 31.68), controlPoint2: CGPoint(x: 45.6, y: 31))
        bezierPath.addLine(to: CGPoint(x: 46.49, y: 28.64))
        bezierPath.addCurve(to: CGPoint(x: 46.29, y: 26.27), controlPoint1: CGPoint(x: 47.01, y: 27.91), controlPoint2: CGPoint(x: 46.93, y: 26.91))
        bezierPath.addLine(to: CGPoint(x: 44.44, y: 24.43))
        bezierPath.addCurve(to: CGPoint(x: 43.14, y: 23.89), controlPoint1: CGPoint(x: 44.09, y: 24.08), controlPoint2: CGPoint(x: 43.63, y: 23.89))
        bezierPath.addCurve(to: CGPoint(x: 42.08, y: 24.23), controlPoint1: CGPoint(x: 42.76, y: 23.89), controlPoint2: CGPoint(x: 42.39, y: 24))
        bezierPath.addLine(to: CGPoint(x: 40.36, y: 25.46))
        bezierPath.addCurve(to: CGPoint(x: 38.26, y: 24.59), controlPoint1: CGPoint(x: 39.69, y: 25.1), controlPoint2: CGPoint(x: 38.99, y: 24.81))
        bezierPath.addLine(to: CGPoint(x: 37.91, y: 22.53))
        bezierPath.addCurve(to: CGPoint(x: 36.1, y: 21), controlPoint1: CGPoint(x: 37.76, y: 21.65), controlPoint2: CGPoint(x: 37, y: 21))
        bezierPath.addLine(to: CGPoint(x: 33.49, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 31.68, y: 22.53), controlPoint1: CGPoint(x: 32.59, y: 21), controlPoint2: CGPoint(x: 31.83, y: 21.65))
        bezierPath.addLine(to: CGPoint(x: 31.32, y: 24.64))
        bezierPath.addCurve(to: CGPoint(x: 29.3, y: 25.49), controlPoint1: CGPoint(x: 30.62, y: 24.86), controlPoint2: CGPoint(x: 29.95, y: 25.15))
        bezierPath.addLine(to: CGPoint(x: 27.59, y: 24.26))
        bezierPath.addCurve(to: CGPoint(x: 26.53, y: 23.92), controlPoint1: CGPoint(x: 27.28, y: 24.04), controlPoint2: CGPoint(x: 26.91, y: 23.92))
        bezierPath.addCurve(to: CGPoint(x: 25.23, y: 24.46), controlPoint1: CGPoint(x: 26.04, y: 23.92), controlPoint2: CGPoint(x: 25.57, y: 24.12))
        bezierPath.addLine(to: CGPoint(x: 23.38, y: 26.31))
        bezierPath.addCurve(to: CGPoint(x: 23.18, y: 28.68), controlPoint1: CGPoint(x: 22.74, y: 26.94), controlPoint2: CGPoint(x: 22.66, y: 27.94))
        bezierPath.addLine(to: CGPoint(x: 24.42, y: 30.42))
        bezierPath.addCurve(to: CGPoint(x: 23.59, y: 32.45), controlPoint1: CGPoint(x: 24.08, y: 31.07), controlPoint2: CGPoint(x: 23.8, y: 31.75))
        bezierPath.addLine(to: CGPoint(x: 21.53, y: 32.8))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 34.61), controlPoint1: CGPoint(x: 20.65, y: 32.94), controlPoint2: CGPoint(x: 20, y: 33.71))
        bezierPath.addLine(to: CGPoint(x: 20, y: 37.22))
        bezierPath.addCurve(to: CGPoint(x: 21.53, y: 39.03), controlPoint1: CGPoint(x: 20, y: 38.12), controlPoint2: CGPoint(x: 20.65, y: 38.88))
        bezierPath.addLine(to: CGPoint(x: 23.64, y: 39.39))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 41.41), controlPoint1: CGPoint(x: 23.86, y: 40.09), controlPoint2: CGPoint(x: 24.14, y: 40.76))
        bezierPath.addLine(to: CGPoint(x: 23.27, y: 43.11))
        bezierPath.addCurve(to: CGPoint(x: 23.47, y: 45.47), controlPoint1: CGPoint(x: 22.75, y: 43.84), controlPoint2: CGPoint(x: 22.83, y: 44.84))
        bezierPath.addLine(to: CGPoint(x: 25.32, y: 47.32))
        bezierPath.addCurve(to: CGPoint(x: 26.61, y: 47.86), controlPoint1: CGPoint(x: 25.67, y: 47.67), controlPoint2: CGPoint(x: 26.12, y: 47.86))
        bezierPath.addCurve(to: CGPoint(x: 27.68, y: 47.52), controlPoint1: CGPoint(x: 27, y: 47.86), controlPoint2: CGPoint(x: 27.37, y: 47.74))
        bezierPath.addLine(to: CGPoint(x: 29.42, y: 46.28))
        bezierPath.addCurve(to: CGPoint(x: 31.38, y: 47.08), controlPoint1: CGPoint(x: 30.05, y: 46.61), controlPoint2: CGPoint(x: 30.7, y: 46.87))
        bezierPath.addLine(to: CGPoint(x: 31.73, y: 49.17))
        bezierPath.addCurve(to: CGPoint(x: 33.54, y: 50.7), controlPoint1: CGPoint(x: 31.88, y: 50.06), controlPoint2: CGPoint(x: 32.64, y: 50.7))
        bezierPath.addLine(to: CGPoint(x: 36.16, y: 50.7))
        bezierPath.addCurve(to: CGPoint(x: 37.97, y: 49.17), controlPoint1: CGPoint(x: 37.06, y: 50.7), controlPoint2: CGPoint(x: 37.82, y: 50.06))
        bezierPath.addLine(to: CGPoint(x: 38.32, y: 47.08))
        bezierPath.addCurve(to: CGPoint(x: 40.35, y: 46.25), controlPoint1: CGPoint(x: 39.02, y: 46.87), controlPoint2: CGPoint(x: 39.7, y: 46.59))
        bezierPath.addLine(to: CGPoint(x: 42.06, y: 47.47))
        bezierPath.addCurve(to: CGPoint(x: 43.13, y: 47.82), controlPoint1: CGPoint(x: 42.37, y: 47.7), controlPoint2: CGPoint(x: 42.75, y: 47.82))
        bezierPath.addLine(to: CGPoint(x: 43.13, y: 47.82))
        bezierPath.addCurve(to: CGPoint(x: 44.43, y: 47.28), controlPoint1: CGPoint(x: 43.62, y: 47.82), controlPoint2: CGPoint(x: 44.08, y: 47.62))
        bezierPath.addLine(to: CGPoint(x: 46.28, y: 45.43))
        bezierPath.addCurve(to: CGPoint(x: 46.48, y: 43.06), controlPoint1: CGPoint(x: 46.91, y: 44.79), controlPoint2: CGPoint(x: 47, y: 43.8))
        bezierPath.addLine(to: CGPoint(x: 45.25, y: 41.34))
        bezierPath.addCurve(to: CGPoint(x: 46.09, y: 39.32), controlPoint1: CGPoint(x: 45.59, y: 40.69), controlPoint2: CGPoint(x: 45.87, y: 40.01))
        bezierPath.addLine(to: CGPoint(x: 48.17, y: 38.97))
        bezierPath.addCurve(to: CGPoint(x: 49.7, y: 37.16), controlPoint1: CGPoint(x: 49.06, y: 38.82), controlPoint2: CGPoint(x: 49.7, y: 38.06))
        bezierPath.addLine(to: CGPoint(x: 49.7, y: 34.54))
        bezierPath.addCurve(to: CGPoint(x: 48.18, y: 32.73), controlPoint1: CGPoint(x: 49.72, y: 33.65), controlPoint2: CGPoint(x: 49.07, y: 32.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 48.04, y: 37.16))
        bezierPath.addCurve(to: CGPoint(x: 47.9, y: 37.32), controlPoint1: CGPoint(x: 48.04, y: 37.24), controlPoint2: CGPoint(x: 47.98, y: 37.31))
        bezierPath.addLine(to: CGPoint(x: 45.3, y: 37.75))
        bezierPath.addCurve(to: CGPoint(x: 44.63, y: 38.37), controlPoint1: CGPoint(x: 44.97, y: 37.81), controlPoint2: CGPoint(x: 44.71, y: 38.05))
        bezierPath.addCurve(to: CGPoint(x: 43.55, y: 40.97), controlPoint1: CGPoint(x: 44.39, y: 39.28), controlPoint2: CGPoint(x: 44.03, y: 40.15))
        bezierPath.addCurve(to: CGPoint(x: 43.58, y: 41.88), controlPoint1: CGPoint(x: 43.38, y: 41.25), controlPoint2: CGPoint(x: 43.39, y: 41.61))
        bezierPath.addLine(to: CGPoint(x: 45.12, y: 44.04))
        bezierPath.addCurve(to: CGPoint(x: 45.1, y: 44.25), controlPoint1: CGPoint(x: 45.16, y: 44.1), controlPoint2: CGPoint(x: 45.15, y: 44.19))
        bezierPath.addLine(to: CGPoint(x: 43.25, y: 46.1))
        bezierPath.addCurve(to: CGPoint(x: 43.13, y: 46.15), controlPoint1: CGPoint(x: 43.21, y: 46.14), controlPoint2: CGPoint(x: 43.16, y: 46.15))
        bezierPath.addCurve(to: CGPoint(x: 43.04, y: 46.12), controlPoint1: CGPoint(x: 43.09, y: 46.15), controlPoint2: CGPoint(x: 43.06, y: 46.13))
        bezierPath.addLine(to: CGPoint(x: 40.89, y: 44.58))
        bezierPath.addCurve(to: CGPoint(x: 39.97, y: 44.55), controlPoint1: CGPoint(x: 40.62, y: 44.39), controlPoint2: CGPoint(x: 40.26, y: 44.38))
        bezierPath.addCurve(to: CGPoint(x: 37.37, y: 45.63), controlPoint1: CGPoint(x: 39.16, y: 45.03), controlPoint2: CGPoint(x: 38.29, y: 45.39))
        bezierPath.addCurve(to: CGPoint(x: 36.76, y: 46.3), controlPoint1: CGPoint(x: 37.05, y: 45.71), controlPoint2: CGPoint(x: 36.81, y: 45.97))
        bezierPath.addLine(to: CGPoint(x: 36.32, y: 48.9))
        bezierPath.addCurve(to: CGPoint(x: 36.16, y: 49.04), controlPoint1: CGPoint(x: 36.31, y: 48.98), controlPoint2: CGPoint(x: 36.24, y: 49.04))
        bezierPath.addLine(to: CGPoint(x: 33.55, y: 49.04))
        bezierPath.addCurve(to: CGPoint(x: 33.38, y: 48.9), controlPoint1: CGPoint(x: 33.46, y: 49.04), controlPoint2: CGPoint(x: 33.4, y: 48.98))
        bezierPath.addLine(to: CGPoint(x: 32.95, y: 46.3))
        bezierPath.addCurve(to: CGPoint(x: 32.34, y: 45.63), controlPoint1: CGPoint(x: 32.89, y: 45.97), controlPoint2: CGPoint(x: 32.65, y: 45.71))
        bezierPath.addCurve(to: CGPoint(x: 29.79, y: 44.58), controlPoint1: CGPoint(x: 31.45, y: 45.4), controlPoint2: CGPoint(x: 30.59, y: 45.04))
        bezierPath.addCurve(to: CGPoint(x: 29.37, y: 44.47), controlPoint1: CGPoint(x: 29.66, y: 44.51), controlPoint2: CGPoint(x: 29.51, y: 44.47))
        bezierPath.addCurve(to: CGPoint(x: 28.89, y: 44.63), controlPoint1: CGPoint(x: 29.2, y: 44.47), controlPoint2: CGPoint(x: 29.03, y: 44.52))
        bezierPath.addLine(to: CGPoint(x: 26.71, y: 46.17))
        bezierPath.addCurve(to: CGPoint(x: 26.62, y: 46.2), controlPoint1: CGPoint(x: 26.68, y: 46.19), controlPoint2: CGPoint(x: 26.65, y: 46.2))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 46.15), controlPoint1: CGPoint(x: 26.6, y: 46.2), controlPoint2: CGPoint(x: 26.55, y: 46.2))
        bezierPath.addLine(to: CGPoint(x: 24.65, y: 44.3))
        bezierPath.addCurve(to: CGPoint(x: 24.64, y: 44.09), controlPoint1: CGPoint(x: 24.6, y: 44.25), controlPoint2: CGPoint(x: 24.59, y: 44.16))
        bezierPath.addLine(to: CGPoint(x: 26.16, y: 41.95))
        bezierPath.addCurve(to: CGPoint(x: 26.2, y: 41.03), controlPoint1: CGPoint(x: 26.35, y: 41.68), controlPoint2: CGPoint(x: 26.37, y: 41.32))
        bezierPath.addCurve(to: CGPoint(x: 25.11, y: 38.44), controlPoint1: CGPoint(x: 25.71, y: 40.23), controlPoint2: CGPoint(x: 25.34, y: 39.35))
        bezierPath.addCurve(to: CGPoint(x: 24.44, y: 37.83), controlPoint1: CGPoint(x: 25.02, y: 38.12), controlPoint2: CGPoint(x: 24.76, y: 37.88))
        bezierPath.addLine(to: CGPoint(x: 21.81, y: 37.38))
        bezierPath.addCurve(to: CGPoint(x: 21.68, y: 37.22), controlPoint1: CGPoint(x: 21.73, y: 37.37), controlPoint2: CGPoint(x: 21.68, y: 37.3))
        bezierPath.addLine(to: CGPoint(x: 21.68, y: 34.61))
        bezierPath.addCurve(to: CGPoint(x: 21.81, y: 34.45), controlPoint1: CGPoint(x: 21.68, y: 34.53), controlPoint2: CGPoint(x: 21.73, y: 34.46))
        bezierPath.addLine(to: CGPoint(x: 24.4, y: 34.01))
        bezierPath.addCurve(to: CGPoint(x: 25.08, y: 33.39), controlPoint1: CGPoint(x: 24.73, y: 33.96), controlPoint2: CGPoint(x: 24.99, y: 33.71))
        bezierPath.addCurve(to: CGPoint(x: 26.14, y: 30.79), controlPoint1: CGPoint(x: 25.31, y: 32.48), controlPoint2: CGPoint(x: 25.66, y: 31.6))
        bezierPath.addCurve(to: CGPoint(x: 26.09, y: 29.88), controlPoint1: CGPoint(x: 26.3, y: 30.5), controlPoint2: CGPoint(x: 26.29, y: 30.15))
        bezierPath.addLine(to: CGPoint(x: 24.55, y: 27.71))
        bezierPath.addCurve(to: CGPoint(x: 24.57, y: 27.5), controlPoint1: CGPoint(x: 24.5, y: 27.65), controlPoint2: CGPoint(x: 24.51, y: 27.55))
        bezierPath.addLine(to: CGPoint(x: 26.42, y: 25.65))
        bezierPath.addCurve(to: CGPoint(x: 26.53, y: 25.6), controlPoint1: CGPoint(x: 26.46, y: 25.6), controlPoint2: CGPoint(x: 26.5, y: 25.6))
        bezierPath.addCurve(to: CGPoint(x: 26.63, y: 25.63), controlPoint1: CGPoint(x: 26.57, y: 25.6), controlPoint2: CGPoint(x: 26.6, y: 25.61))
        bezierPath.addLine(to: CGPoint(x: 28.77, y: 27.16))
        bezierPath.addCurve(to: CGPoint(x: 29.69, y: 27.19), controlPoint1: CGPoint(x: 29.04, y: 27.35), controlPoint2: CGPoint(x: 29.4, y: 27.36))
        bezierPath.addCurve(to: CGPoint(x: 32.28, y: 26.1), controlPoint1: CGPoint(x: 30.49, y: 26.71), controlPoint2: CGPoint(x: 31.37, y: 26.34))
        bezierPath.addCurve(to: CGPoint(x: 32.89, y: 25.43), controlPoint1: CGPoint(x: 32.6, y: 26.01), controlPoint2: CGPoint(x: 32.84, y: 25.75))
        bezierPath.addLine(to: CGPoint(x: 33.34, y: 22.81))
        bezierPath.addCurve(to: CGPoint(x: 33.5, y: 22.67), controlPoint1: CGPoint(x: 33.35, y: 22.73), controlPoint2: CGPoint(x: 33.42, y: 22.67))
        bezierPath.addLine(to: CGPoint(x: 36.11, y: 22.67))
        bezierPath.addCurve(to: CGPoint(x: 36.28, y: 22.81), controlPoint1: CGPoint(x: 36.19, y: 22.67), controlPoint2: CGPoint(x: 36.26, y: 22.73))
        bezierPath.addLine(to: CGPoint(x: 36.71, y: 25.39))
        bezierPath.addCurve(to: CGPoint(x: 37.33, y: 26.07), controlPoint1: CGPoint(x: 36.77, y: 25.72), controlPoint2: CGPoint(x: 37.01, y: 25.99))
        bezierPath.addCurve(to: CGPoint(x: 39.99, y: 27.16), controlPoint1: CGPoint(x: 38.27, y: 26.31), controlPoint2: CGPoint(x: 39.16, y: 26.67))
        bezierPath.addCurve(to: CGPoint(x: 40.9, y: 27.12), controlPoint1: CGPoint(x: 40.28, y: 27.33), controlPoint2: CGPoint(x: 40.63, y: 27.32))
        bezierPath.addLine(to: CGPoint(x: 43.04, y: 25.59))
        bezierPath.addCurve(to: CGPoint(x: 43.14, y: 25.55), controlPoint1: CGPoint(x: 43.08, y: 25.57), controlPoint2: CGPoint(x: 43.11, y: 25.55))
        bezierPath.addCurve(to: CGPoint(x: 43.26, y: 25.6), controlPoint1: CGPoint(x: 43.16, y: 25.55), controlPoint2: CGPoint(x: 43.21, y: 25.56))
        bezierPath.addLine(to: CGPoint(x: 45.1, y: 27.45))
        bezierPath.addCurve(to: CGPoint(x: 45.12, y: 27.66), controlPoint1: CGPoint(x: 45.16, y: 27.51), controlPoint2: CGPoint(x: 45.17, y: 27.6))
        bezierPath.addLine(to: CGPoint(x: 43.59, y: 29.82))
        bezierPath.addCurve(to: CGPoint(x: 43.55, y: 30.73), controlPoint1: CGPoint(x: 43.4, y: 30.08), controlPoint2: CGPoint(x: 43.39, y: 30.44))
        bezierPath.addCurve(to: CGPoint(x: 44.63, y: 33.33), controlPoint1: CGPoint(x: 44.04, y: 31.54), controlPoint2: CGPoint(x: 44.4, y: 32.42))
        bezierPath.addCurve(to: CGPoint(x: 45.3, y: 33.94), controlPoint1: CGPoint(x: 44.71, y: 33.65), controlPoint2: CGPoint(x: 44.98, y: 33.89))
        bezierPath.addLine(to: CGPoint(x: 47.91, y: 34.38))
        bezierPath.addCurve(to: CGPoint(x: 48.05, y: 34.54), controlPoint1: CGPoint(x: 47.99, y: 34.4), controlPoint2: CGPoint(x: 48.05, y: 34.46))
        bezierPath.addLine(to: CGPoint(x: 48.05, y: 37.16))
        bezierPath.addLine(to: CGPoint(x: 48.04, y: 37.16))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 34.85, y: 29.44))
        bezier2Path.addCurve(to: CGPoint(x: 28.44, y: 35.85), controlPoint1: CGPoint(x: 31.32, y: 29.44), controlPoint2: CGPoint(x: 28.44, y: 32.31))
        bezier2Path.addCurve(to: CGPoint(x: 34.85, y: 42.26), controlPoint1: CGPoint(x: 28.44, y: 39.38), controlPoint2: CGPoint(x: 31.32, y: 42.26))
        bezier2Path.addCurve(to: CGPoint(x: 41.26, y: 35.85), controlPoint1: CGPoint(x: 38.39, y: 42.26), controlPoint2: CGPoint(x: 41.26, y: 39.38))
        bezier2Path.addCurve(to: CGPoint(x: 34.85, y: 29.44), controlPoint1: CGPoint(x: 41.26, y: 32.31), controlPoint2: CGPoint(x: 38.39, y: 29.44))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 34.85, y: 40.58))
        bezier2Path.addCurve(to: CGPoint(x: 30.12, y: 35.85), controlPoint1: CGPoint(x: 32.24, y: 40.58), controlPoint2: CGPoint(x: 30.12, y: 38.46))
        bezier2Path.addCurve(to: CGPoint(x: 34.85, y: 31.11), controlPoint1: CGPoint(x: 30.12, y: 33.24), controlPoint2: CGPoint(x: 32.24, y: 31.11))
        bezier2Path.addCurve(to: CGPoint(x: 39.59, y: 35.85), controlPoint1: CGPoint(x: 37.47, y: 31.11), controlPoint2: CGPoint(x: 39.59, y: 33.24))
        bezier2Path.addCurve(to: CGPoint(x: 34.85, y: 40.58), controlPoint1: CGPoint(x: 39.59, y: 38.46), controlPoint2: CGPoint(x: 37.47, y: 40.58))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 62, height: 62))
        fillColor6.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 49.54, y: 48.24))
        bezierPath.addLine(to: CGPoint(x: 42.14, y: 40.56))
        bezierPath.addCurve(to: CGPoint(x: 45.09, y: 32.52), controlPoint1: CGPoint(x: 44.05, y: 38.31), controlPoint2: CGPoint(x: 45.09, y: 35.47))
        bezierPath.addCurve(to: CGPoint(x: 32.54, y: 20), controlPoint1: CGPoint(x: 45.09, y: 25.61), controlPoint2: CGPoint(x: 39.46, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 19.98, y: 32.52), controlPoint1: CGPoint(x: 25.62, y: 20), controlPoint2: CGPoint(x: 19.98, y: 25.61))
        bezierPath.addCurve(to: CGPoint(x: 32.54, y: 45.03), controlPoint1: CGPoint(x: 19.98, y: 39.42), controlPoint2: CGPoint(x: 25.62, y: 45.03))
        bezierPath.addCurve(to: CGPoint(x: 39.73, y: 42.77), controlPoint1: CGPoint(x: 35.13, y: 45.03), controlPoint2: CGPoint(x: 37.61, y: 44.25))
        bezierPath.addLine(to: CGPoint(x: 47.18, y: 50.5))
        bezierPath.addCurve(to: CGPoint(x: 48.36, y: 51), controlPoint1: CGPoint(x: 47.5, y: 50.82), controlPoint2: CGPoint(x: 47.91, y: 51))
        bezierPath.addCurve(to: CGPoint(x: 49.5, y: 50.54), controlPoint1: CGPoint(x: 48.79, y: 51), controlPoint2: CGPoint(x: 49.19, y: 50.84))
        bezierPath.addCurve(to: CGPoint(x: 49.54, y: 48.24), controlPoint1: CGPoint(x: 50.15, y: 49.92), controlPoint2: CGPoint(x: 50.17, y: 48.89))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32.54, y: 23.27))
        bezierPath.addCurve(to: CGPoint(x: 41.81, y: 32.52), controlPoint1: CGPoint(x: 37.65, y: 23.27), controlPoint2: CGPoint(x: 41.81, y: 27.42))
        bezierPath.addCurve(to: CGPoint(x: 32.54, y: 41.77), controlPoint1: CGPoint(x: 41.81, y: 37.62), controlPoint2: CGPoint(x: 37.65, y: 41.77))
        bezierPath.addCurve(to: CGPoint(x: 23.26, y: 32.52), controlPoint1: CGPoint(x: 27.42, y: 41.77), controlPoint2: CGPoint(x: 23.26, y: 37.62))
        bezierPath.addCurve(to: CGPoint(x: 32.54, y: 23.27), controlPoint1: CGPoint(x: 23.26, y: 27.42), controlPoint2: CGPoint(x: 27.42, y: 23.27))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 62, height: 62))
        fillColor6.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 45.4, y: 41.16))
        bezierPath.addLine(to: CGPoint(x: 40.41, y: 38.69))
        bezierPath.addCurve(to: CGPoint(x: 39.65, y: 37.47), controlPoint1: CGPoint(x: 39.94, y: 38.46), controlPoint2: CGPoint(x: 39.65, y: 37.99))
        bezierPath.addLine(to: CGPoint(x: 39.65, y: 35.72))
        bezierPath.addCurve(to: CGPoint(x: 40.03, y: 35.23), controlPoint1: CGPoint(x: 39.77, y: 35.58), controlPoint2: CGPoint(x: 39.9, y: 35.41))
        bezierPath.addCurve(to: CGPoint(x: 41.57, y: 32.24), controlPoint1: CGPoint(x: 40.67, y: 34.33), controlPoint2: CGPoint(x: 41.19, y: 33.32))
        bezierPath.addCurve(to: CGPoint(x: 42.78, y: 30.37), controlPoint1: CGPoint(x: 42.3, y: 31.9), controlPoint2: CGPoint(x: 42.78, y: 31.18))
        bezierPath.addLine(to: CGPoint(x: 42.78, y: 28.3))
        bezierPath.addCurve(to: CGPoint(x: 42.26, y: 26.94), controlPoint1: CGPoint(x: 42.78, y: 27.8), controlPoint2: CGPoint(x: 42.59, y: 27.32))
        bezierPath.addLine(to: CGPoint(x: 42.26, y: 24.2))
        bezierPath.addCurve(to: CGPoint(x: 41.17, y: 20.82), controlPoint1: CGPoint(x: 42.29, y: 23.91), controlPoint2: CGPoint(x: 42.4, y: 22.22))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 19), controlPoint1: CGPoint(x: 40.1, y: 19.61), controlPoint2: CGPoint(x: 38.36, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 30.83, y: 20.82), controlPoint1: CGPoint(x: 33.64, y: 19), controlPoint2: CGPoint(x: 31.9, y: 19.61))
        bezierPath.addCurve(to: CGPoint(x: 29.74, y: 24.2), controlPoint1: CGPoint(x: 29.6, y: 22.22), controlPoint2: CGPoint(x: 29.71, y: 23.91))
        bezierPath.addLine(to: CGPoint(x: 29.74, y: 26.94))
        bezierPath.addCurve(to: CGPoint(x: 29.22, y: 28.3), controlPoint1: CGPoint(x: 29.41, y: 27.32), controlPoint2: CGPoint(x: 29.22, y: 27.8))
        bezierPath.addLine(to: CGPoint(x: 29.22, y: 30.37))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 31.97), controlPoint1: CGPoint(x: 29.22, y: 31), controlPoint2: CGPoint(x: 29.51, y: 31.58))
        bezierPath.addCurve(to: CGPoint(x: 31.83, y: 35.71), controlPoint1: CGPoint(x: 30.48, y: 33.85), controlPoint2: CGPoint(x: 31.48, y: 35.26))
        bezierPath.addLine(to: CGPoint(x: 31.83, y: 37.42))
        bezierPath.addCurve(to: CGPoint(x: 31.11, y: 38.62), controlPoint1: CGPoint(x: 31.83, y: 37.92), controlPoint2: CGPoint(x: 31.55, y: 38.38))
        bezierPath.addLine(to: CGPoint(x: 26.45, y: 41.13))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 45.23), controlPoint1: CGPoint(x: 24.94, y: 41.95), controlPoint2: CGPoint(x: 24, y: 43.52))
        bezierPath.addLine(to: CGPoint(x: 24, y: 46.9))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 50), controlPoint1: CGPoint(x: 24, y: 49.35), controlPoint2: CGPoint(x: 31.85, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 46.9), controlPoint1: CGPoint(x: 40.15, y: 50), controlPoint2: CGPoint(x: 48, y: 49.35))
        bezierPath.addLine(to: CGPoint(x: 48, y: 45.33))
        bezierPath.addCurve(to: CGPoint(x: 45.4, y: 41.16), controlPoint1: CGPoint(x: 48, y: 43.55), controlPoint2: CGPoint(x: 47, y: 41.95))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 46.96, y: 46.9))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 48.97), controlPoint1: CGPoint(x: 46.96, y: 47.6), controlPoint2: CGPoint(x: 43.09, y: 48.97))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 46.9), controlPoint1: CGPoint(x: 28.91, y: 48.97), controlPoint2: CGPoint(x: 25.04, y: 47.6))
        bezierPath.addLine(to: CGPoint(x: 25.04, y: 45.23))
        bezierPath.addCurve(to: CGPoint(x: 26.95, y: 42.04), controlPoint1: CGPoint(x: 25.04, y: 43.9), controlPoint2: CGPoint(x: 25.77, y: 42.68))
        bezierPath.addLine(to: CGPoint(x: 31.61, y: 39.53))
        bezierPath.addCurve(to: CGPoint(x: 32.87, y: 37.42), controlPoint1: CGPoint(x: 32.39, y: 39.11), controlPoint2: CGPoint(x: 32.87, y: 38.3))
        bezierPath.addLine(to: CGPoint(x: 32.87, y: 35.35))
        bezierPath.addLine(to: CGPoint(x: 32.75, y: 35.2))
        bezierPath.addCurve(to: CGPoint(x: 30.97, y: 31.55), controlPoint1: CGPoint(x: 32.74, y: 35.19), controlPoint2: CGPoint(x: 31.46, y: 33.65))
        bezierPath.addLine(to: CGPoint(x: 30.92, y: 31.35))
        bezierPath.addLine(to: CGPoint(x: 30.74, y: 31.23))
        bezierPath.addCurve(to: CGPoint(x: 30.26, y: 30.37), controlPoint1: CGPoint(x: 30.44, y: 31.04), controlPoint2: CGPoint(x: 30.26, y: 30.72))
        bezierPath.addLine(to: CGPoint(x: 30.26, y: 28.3))
        bezierPath.addCurve(to: CGPoint(x: 30.61, y: 27.54), controlPoint1: CGPoint(x: 30.26, y: 28.01), controlPoint2: CGPoint(x: 30.39, y: 27.74))
        bezierPath.addLine(to: CGPoint(x: 30.78, y: 27.38))
        bezierPath.addLine(to: CGPoint(x: 30.78, y: 24.17))
        bezierPath.addLine(to: CGPoint(x: 30.78, y: 24.1))
        bezierPath.addCurve(to: CGPoint(x: 31.62, y: 21.5), controlPoint1: CGPoint(x: 30.78, y: 24.09), controlPoint2: CGPoint(x: 30.6, y: 22.65))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 20.03), controlPoint1: CGPoint(x: 32.48, y: 20.53), controlPoint2: CGPoint(x: 33.96, y: 20.03))
        bezierPath.addCurve(to: CGPoint(x: 40.38, y: 21.49), controlPoint1: CGPoint(x: 38.04, y: 20.03), controlPoint2: CGPoint(x: 39.51, y: 20.52))
        bezierPath.addCurve(to: CGPoint(x: 41.22, y: 24.1), controlPoint1: CGPoint(x: 41.39, y: 22.63), controlPoint2: CGPoint(x: 41.22, y: 24.09))
        bezierPath.addLine(to: CGPoint(x: 41.22, y: 27.38))
        bezierPath.addLine(to: CGPoint(x: 41.39, y: 27.54))
        bezierPath.addCurve(to: CGPoint(x: 41.74, y: 28.3), controlPoint1: CGPoint(x: 41.61, y: 27.74), controlPoint2: CGPoint(x: 41.74, y: 28.01))
        bezierPath.addLine(to: CGPoint(x: 41.74, y: 30.37))
        bezierPath.addCurve(to: CGPoint(x: 41, y: 31.35), controlPoint1: CGPoint(x: 41.74, y: 30.82), controlPoint2: CGPoint(x: 41.44, y: 31.21))
        bezierPath.addLine(to: CGPoint(x: 40.74, y: 31.43))
        bezierPath.addLine(to: CGPoint(x: 40.65, y: 31.68))
        bezierPath.addCurve(to: CGPoint(x: 39.18, y: 34.63), controlPoint1: CGPoint(x: 40.3, y: 32.76), controlPoint2: CGPoint(x: 39.81, y: 33.75))
        bezierPath.addCurve(to: CGPoint(x: 38.74, y: 35.19), controlPoint1: CGPoint(x: 39.02, y: 34.85), controlPoint2: CGPoint(x: 38.87, y: 35.04))
        bezierPath.addLine(to: CGPoint(x: 38.61, y: 35.34))
        bezierPath.addLine(to: CGPoint(x: 38.61, y: 37.47))
        bezierPath.addCurve(to: CGPoint(x: 39.95, y: 39.62), controlPoint1: CGPoint(x: 38.61, y: 38.38), controlPoint2: CGPoint(x: 39.12, y: 39.21))
        bezierPath.addLine(to: CGPoint(x: 44.93, y: 42.08))
        bezierPath.addCurve(to: CGPoint(x: 46.96, y: 45.33), controlPoint1: CGPoint(x: 46.18, y: 42.7), controlPoint2: CGPoint(x: 46.96, y: 43.94))
        bezierPath.addLine(to: CGPoint(x: 46.96, y: 46.9))
        bezierPath.close()
        fillColor6.setStroke()
        bezierPath.lineWidth = 1.5
        bezierPath.miterLimit = 4
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSelection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, isSelected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor9 = UIColor(red: 0.333, green: 0.376, blue: 0.502, alpha: 0.500)

        //// Group
        //// Oval Drawing
        let ovalRect = CGRect(x: 11.5, y: 12.5, width: 26, height: 26)
        let ovalPath = UIBezierPath(ovalIn: ovalRect)
        UIColor.lightGray.setStroke()
        ovalPath.lineWidth = 3
        ovalPath.stroke()
        let ovalStyle = NSMutableParagraphStyle()
        ovalStyle.alignment = .center
        let ovalFontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: ovalStyle,
            ] as [NSAttributedString.Key: Any]

        "\n".draw(in: ovalRect, withAttributes: ovalFontAttributes)


        if (isSelected) {
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 13, width: 25, height: 25))
            fillColor9.setFill()
            oval2Path.fill()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOkay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let color = UIColor(red: 1.000, green: 0.620, blue: 0.439, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.5, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 25.5), controlPoint1: CGPoint(x: 14.83, y: 43), controlPoint2: CGPoint(x: 7, y: 35.17))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 8), controlPoint1: CGPoint(x: 7, y: 15.83), controlPoint2: CGPoint(x: 14.83, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 25.5), controlPoint1: CGPoint(x: 34.17, y: 8), controlPoint2: CGPoint(x: 42, y: 15.83))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 43), controlPoint1: CGPoint(x: 41.99, y: 35.16), controlPoint2: CGPoint(x: 34.16, y: 42.99))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24.5, y: 10.96))
        bezierPath.addCurve(to: CGPoint(x: 9.97, y: 25.51), controlPoint1: CGPoint(x: 16.47, y: 10.97), controlPoint2: CGPoint(x: 9.96, y: 17.48))
        bezierPath.addCurve(to: CGPoint(x: 24.52, y: 40.04), controlPoint1: CGPoint(x: 9.98, y: 33.54), controlPoint2: CGPoint(x: 16.49, y: 40.04))
        bezierPath.addCurve(to: CGPoint(x: 39.05, y: 25.5), controlPoint1: CGPoint(x: 32.54, y: 40.03), controlPoint2: CGPoint(x: 39.05, y: 33.53))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 10.96), controlPoint1: CGPoint(x: 39.04, y: 17.47), controlPoint2: CGPoint(x: 32.53, y: 10.97))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 21.78, y: 30.86))
        bezier2Path.addLine(to: CGPoint(x: 21.78, y: 30.86))
        bezier2Path.addCurve(to: CGPoint(x: 20.73, y: 30.4), controlPoint1: CGPoint(x: 21.38, y: 30.85), controlPoint2: CGPoint(x: 21.01, y: 30.69))
        bezier2Path.addLine(to: CGPoint(x: 17.01, y: 26.52))
        bezier2Path.addCurve(to: CGPoint(x: 17.15, y: 24.43), controlPoint1: CGPoint(x: 16.47, y: 25.91), controlPoint2: CGPoint(x: 16.54, y: 24.97))
        bezier2Path.addCurve(to: CGPoint(x: 19.14, y: 24.47), controlPoint1: CGPoint(x: 17.73, y: 23.93), controlPoint2: CGPoint(x: 18.59, y: 23.95))
        bezier2Path.addLine(to: CGPoint(x: 21.78, y: 27.28))
        bezier2Path.addLine(to: CGPoint(x: 28.88, y: 20.26))
        bezier2Path.addCurve(to: CGPoint(x: 30.97, y: 20.17), controlPoint1: CGPoint(x: 29.43, y: 19.66), controlPoint2: CGPoint(x: 30.37, y: 19.61))
        bezier2Path.addCurve(to: CGPoint(x: 31.07, y: 22.26), controlPoint1: CGPoint(x: 31.58, y: 20.72), controlPoint2: CGPoint(x: 31.62, y: 21.65))
        bezier2Path.addCurve(to: CGPoint(x: 30.96, y: 22.37), controlPoint1: CGPoint(x: 31.03, y: 22.3), controlPoint2: CGPoint(x: 31, y: 22.33))
        bezier2Path.addLine(to: CGPoint(x: 22.8, y: 30.44))
        bezier2Path.addCurve(to: CGPoint(x: 21.78, y: 30.86), controlPoint1: CGPoint(x: 22.53, y: 30.7), controlPoint2: CGPoint(x: 22.16, y: 30.86))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWhiteHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 34.41, y: 27.07))
        bezierPath.addCurve(to: CGPoint(x: 41.85, y: 22.21), controlPoint1: CGPoint(x: 35.66, y: 24.21), controlPoint2: CGPoint(x: 38.52, y: 22.21))
        bezierPath.addCurve(to: CGPoint(x: 49.97, y: 30.31), controlPoint1: CGPoint(x: 46.34, y: 22.21), controlPoint2: CGPoint(x: 49.57, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 49.71, y: 33.38), controlPoint1: CGPoint(x: 49.97, y: 30.31), controlPoint2: CGPoint(x: 50.19, y: 31.41))
        bezierPath.addCurve(to: CGPoint(x: 45.43, y: 40.26), controlPoint1: CGPoint(x: 49.05, y: 36.06), controlPoint2: CGPoint(x: 47.51, y: 38.44))
        bezierPath.addLine(to: CGPoint(x: 36.31, y: 48.1))
        bezierPath.addCurve(to: CGPoint(x: 32.52, y: 48.08), controlPoint1: CGPoint(x: 35.23, y: 49.03), controlPoint2: CGPoint(x: 33.59, y: 49.02))
        bezierPath.addLine(to: CGPoint(x: 23.57, y: 40.26))
        bezierPath.addCurve(to: CGPoint(x: 19.29, y: 33.37), controlPoint1: CGPoint(x: 21.49, y: 38.44), controlPoint2: CGPoint(x: 19.95, y: 36.06))
        bezierPath.addCurve(to: CGPoint(x: 19.03, y: 30.31), controlPoint1: CGPoint(x: 18.81, y: 31.41), controlPoint2: CGPoint(x: 19.03, y: 30.31))
        bezierPath.addCurve(to: CGPoint(x: 27.15, y: 22.21), controlPoint1: CGPoint(x: 19.43, y: 25.91), controlPoint2: CGPoint(x: 22.66, y: 22.21))
        bezierPath.addCurve(to: CGPoint(x: 34.41, y: 27.07), controlPoint1: CGPoint(x: 30.48, y: 22.21), controlPoint2: CGPoint(x: 33.15, y: 24.21))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        fillColor6.setStroke()
        bezierPath.lineWidth = 0
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 62, height: 62))
        fillColor6.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSprayCanTagPlace(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group 13
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 58.55, y: 21.04, width: 2, height: 3.76))
        fillColor6.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 50.55, y: 56.45, width: 2, height: 2), cornerRadius: 1)
        fillColor6.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 65.45, y: 56.45, width: 1, height: 2), cornerRadius: 0.5)
        fillColor6.setFill()
        rectangle2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 60.87, y: 57.08))
        bezierPath.addCurve(to: CGPoint(x: 59.99, y: 57.15), controlPoint1: CGPoint(x: 60.61, y: 56.79), controlPoint2: CGPoint(x: 60.22, y: 56.82))
        bezierPath.addCurve(to: CGPoint(x: 59.5, y: 57.42), controlPoint1: CGPoint(x: 59.87, y: 57.32), controlPoint2: CGPoint(x: 59.69, y: 57.42))
        bezierPath.addCurve(to: CGPoint(x: 59, y: 57.15), controlPoint1: CGPoint(x: 59.3, y: 57.42), controlPoint2: CGPoint(x: 59.12, y: 57.32))
        bezierPath.addCurve(to: CGPoint(x: 58.12, y: 57.08), controlPoint1: CGPoint(x: 58.78, y: 56.82), controlPoint2: CGPoint(x: 58.38, y: 56.79))
        bezierPath.addCurve(to: CGPoint(x: 58.06, y: 58.19), controlPoint1: CGPoint(x: 57.86, y: 57.36), controlPoint2: CGPoint(x: 57.84, y: 57.86))
        bezierPath.addCurve(to: CGPoint(x: 59.5, y: 59.01), controlPoint1: CGPoint(x: 58.42, y: 58.71), controlPoint2: CGPoint(x: 58.94, y: 59.01))
        bezierPath.addCurve(to: CGPoint(x: 60.93, y: 58.19), controlPoint1: CGPoint(x: 60.05, y: 59.01), controlPoint2: CGPoint(x: 60.58, y: 58.71))
        bezierPath.addCurve(to: CGPoint(x: 60.87, y: 57.08), controlPoint1: CGPoint(x: 61.16, y: 57.86), controlPoint2: CGPoint(x: 61.13, y: 57.36))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 72.38, y: 74.83))
        bezier2Path.addLine(to: CGPoint(x: 72.38, y: 41.34))
        bezier2Path.addLine(to: CGPoint(x: 72.38, y: 41.34))
        bezier2Path.addCurve(to: CGPoint(x: 74.18, y: 38.83), controlPoint1: CGPoint(x: 73.43, y: 40.97), controlPoint2: CGPoint(x: 74.18, y: 39.99))
        bezier2Path.addCurve(to: CGPoint(x: 72.33, y: 36.31), controlPoint1: CGPoint(x: 74.18, y: 37.66), controlPoint2: CGPoint(x: 73.4, y: 36.66))
        bezier2Path.addCurve(to: CGPoint(x: 67.89, y: 30.94), controlPoint1: CGPoint(x: 72.03, y: 33.8), controlPoint2: CGPoint(x: 70.26, y: 31.72))
        bezier2Path.addCurve(to: CGPoint(x: 68.19, y: 29.74), controlPoint1: CGPoint(x: 68.08, y: 30.58), controlPoint2: CGPoint(x: 68.19, y: 30.17))
        bezier2Path.addCurve(to: CGPoint(x: 65.48, y: 27.07), controlPoint1: CGPoint(x: 68.19, y: 28.27), controlPoint2: CGPoint(x: 66.97, y: 27.07))
        bezier2Path.addLine(to: CGPoint(x: 63.7, y: 27.07))
        bezier2Path.addLine(to: CGPoint(x: 63.7, y: 21.36))
        bezier2Path.addCurve(to: CGPoint(x: 61.3, y: 19), controlPoint1: CGPoint(x: 63.7, y: 20.06), controlPoint2: CGPoint(x: 62.63, y: 19))
        bezier2Path.addLine(to: CGPoint(x: 57.7, y: 19))
        bezier2Path.addCurve(to: CGPoint(x: 55.3, y: 21.36), controlPoint1: CGPoint(x: 56.37, y: 19), controlPoint2: CGPoint(x: 55.3, y: 20.06))
        bezier2Path.addLine(to: CGPoint(x: 55.3, y: 27.07))
        bezier2Path.addLine(to: CGPoint(x: 53.52, y: 27.07))
        bezier2Path.addCurve(to: CGPoint(x: 50.81, y: 29.74), controlPoint1: CGPoint(x: 52.03, y: 27.07), controlPoint2: CGPoint(x: 50.81, y: 28.27))
        bezier2Path.addCurve(to: CGPoint(x: 51.11, y: 30.94), controlPoint1: CGPoint(x: 50.81, y: 30.17), controlPoint2: CGPoint(x: 50.92, y: 30.58))
        bezier2Path.addCurve(to: CGPoint(x: 46.67, y: 36.31), controlPoint1: CGPoint(x: 48.74, y: 31.72), controlPoint2: CGPoint(x: 46.97, y: 33.8))
        bezier2Path.addCurve(to: CGPoint(x: 44.82, y: 38.83), controlPoint1: CGPoint(x: 45.6, y: 36.66), controlPoint2: CGPoint(x: 44.82, y: 37.66))
        bezier2Path.addCurve(to: CGPoint(x: 46.62, y: 41.34), controlPoint1: CGPoint(x: 44.82, y: 39.99), controlPoint2: CGPoint(x: 45.57, y: 40.97))
        bezier2Path.addLine(to: CGPoint(x: 46.62, y: 74.83))
        bezier2Path.addCurve(to: CGPoint(x: 44.82, y: 77.34), controlPoint1: CGPoint(x: 45.57, y: 75.2), controlPoint2: CGPoint(x: 44.82, y: 76.18))
        bezier2Path.addCurve(to: CGPoint(x: 47.53, y: 80), controlPoint1: CGPoint(x: 44.82, y: 78.81), controlPoint2: CGPoint(x: 46.04, y: 80))
        bezier2Path.addLine(to: CGPoint(x: 71.47, y: 80))
        bezier2Path.addCurve(to: CGPoint(x: 74.18, y: 77.34), controlPoint1: CGPoint(x: 72.96, y: 80), controlPoint2: CGPoint(x: 74.18, y: 78.81))
        bezier2Path.addCurve(to: CGPoint(x: 72.38, y: 74.83), controlPoint1: CGPoint(x: 74.18, y: 76.18), controlPoint2: CGPoint(x: 73.43, y: 75.2))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 57.11, y: 21.36))
        bezier2Path.addCurve(to: CGPoint(x: 57.7, y: 20.79), controlPoint1: CGPoint(x: 57.11, y: 21.05), controlPoint2: CGPoint(x: 57.38, y: 20.79))
        bezier2Path.addLine(to: CGPoint(x: 61.3, y: 20.79))
        bezier2Path.addCurve(to: CGPoint(x: 61.89, y: 21.36), controlPoint1: CGPoint(x: 61.62, y: 20.79), controlPoint2: CGPoint(x: 61.89, y: 21.05))
        bezier2Path.addLine(to: CGPoint(x: 61.89, y: 27.07))
        bezier2Path.addLine(to: CGPoint(x: 57.11, y: 27.07))
        bezier2Path.addLine(to: CGPoint(x: 57.11, y: 21.36))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 53.52, y: 28.86))
        bezier2Path.addLine(to: CGPoint(x: 65.48, y: 28.86))
        bezier2Path.addCurve(to: CGPoint(x: 66.37, y: 29.74), controlPoint1: CGPoint(x: 65.97, y: 28.86), controlPoint2: CGPoint(x: 66.37, y: 29.25))
        bezier2Path.addCurve(to: CGPoint(x: 65.63, y: 30.6), controlPoint1: CGPoint(x: 66.37, y: 30.17), controlPoint2: CGPoint(x: 66.05, y: 30.53))
        bezier2Path.addCurve(to: CGPoint(x: 53.37, y: 30.6), controlPoint1: CGPoint(x: 65.62, y: 30.6), controlPoint2: CGPoint(x: 53.38, y: 30.6))
        bezier2Path.addCurve(to: CGPoint(x: 52.63, y: 29.74), controlPoint1: CGPoint(x: 52.95, y: 30.53), controlPoint2: CGPoint(x: 52.63, y: 30.17))
        bezier2Path.addCurve(to: CGPoint(x: 53.52, y: 28.86), controlPoint1: CGPoint(x: 52.63, y: 29.25), controlPoint2: CGPoint(x: 53.03, y: 28.86))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 47.53, y: 37.96))
        bezier2Path.addLine(to: CGPoint(x: 63.11, y: 37.96))
        bezier2Path.addCurve(to: CGPoint(x: 64.02, y: 37.06), controlPoint1: CGPoint(x: 63.61, y: 37.96), controlPoint2: CGPoint(x: 64.02, y: 37.56))
        bezier2Path.addCurve(to: CGPoint(x: 63.11, y: 36.17), controlPoint1: CGPoint(x: 64.02, y: 36.57), controlPoint2: CGPoint(x: 63.61, y: 36.17))
        bezier2Path.addLine(to: CGPoint(x: 48.52, y: 36.17))
        bezier2Path.addCurve(to: CGPoint(x: 53.18, y: 32.4), controlPoint1: CGPoint(x: 48.95, y: 34.02), controlPoint2: CGPoint(x: 50.88, y: 32.4))
        bezier2Path.addCurve(to: CGPoint(x: 65.82, y: 32.4), controlPoint1: CGPoint(x: 53.29, y: 32.4), controlPoint2: CGPoint(x: 65.78, y: 32.4))
        bezier2Path.addCurve(to: CGPoint(x: 70.48, y: 36.17), controlPoint1: CGPoint(x: 68.12, y: 32.4), controlPoint2: CGPoint(x: 70.05, y: 34.02))
        bezier2Path.addLine(to: CGPoint(x: 66.75, y: 36.17))
        bezier2Path.addCurve(to: CGPoint(x: 65.84, y: 37.06), controlPoint1: CGPoint(x: 66.24, y: 36.17), controlPoint2: CGPoint(x: 65.84, y: 36.57))
        bezier2Path.addCurve(to: CGPoint(x: 66.75, y: 37.96), controlPoint1: CGPoint(x: 65.84, y: 37.56), controlPoint2: CGPoint(x: 66.24, y: 37.96))
        bezier2Path.addLine(to: CGPoint(x: 71.47, y: 37.96))
        bezier2Path.addCurve(to: CGPoint(x: 72.36, y: 38.83), controlPoint1: CGPoint(x: 71.96, y: 37.96), controlPoint2: CGPoint(x: 72.36, y: 38.35))
        bezier2Path.addCurve(to: CGPoint(x: 71.47, y: 39.71), controlPoint1: CGPoint(x: 72.36, y: 39.31), controlPoint2: CGPoint(x: 71.96, y: 39.71))
        bezier2Path.addLine(to: CGPoint(x: 47.53, y: 39.71))
        bezier2Path.addCurve(to: CGPoint(x: 46.64, y: 38.83), controlPoint1: CGPoint(x: 47.04, y: 39.71), controlPoint2: CGPoint(x: 46.64, y: 39.31))
        bezier2Path.addCurve(to: CGPoint(x: 47.53, y: 37.96), controlPoint1: CGPoint(x: 46.64, y: 38.35), controlPoint2: CGPoint(x: 47.04, y: 37.96))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 55.3, y: 67.24))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 67.24))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 74.68))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 74.68))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 67.24))
        bezier2Path.addLine(to: CGPoint(x: 51.66, y: 67.24))
        bezier2Path.addCurve(to: CGPoint(x: 52.57, y: 66.34), controlPoint1: CGPoint(x: 52.17, y: 67.24), controlPoint2: CGPoint(x: 52.57, y: 66.84))
        bezier2Path.addCurve(to: CGPoint(x: 51.66, y: 65.45), controlPoint1: CGPoint(x: 52.57, y: 65.85), controlPoint2: CGPoint(x: 52.17, y: 65.45))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 65.45))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 50.72))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 50.72))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 65.45))
        bezier2Path.addLine(to: CGPoint(x: 55.3, y: 65.45))
        bezier2Path.addCurve(to: CGPoint(x: 54.39, y: 66.34), controlPoint1: CGPoint(x: 54.8, y: 65.45), controlPoint2: CGPoint(x: 54.39, y: 65.85))
        bezier2Path.addCurve(to: CGPoint(x: 55.3, y: 67.24), controlPoint1: CGPoint(x: 54.39, y: 66.84), controlPoint2: CGPoint(x: 54.8, y: 67.24))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 70.56, y: 48.93))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 48.93))
        bezier2Path.addLine(to: CGPoint(x: 48.44, y: 41.49))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 41.49))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 48.93))
        bezier2Path.addLine(to: CGPoint(x: 70.56, y: 48.93))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 71.47, y: 78.21))
        bezier2Path.addLine(to: CGPoint(x: 47.53, y: 78.21))
        bezier2Path.addCurve(to: CGPoint(x: 46.64, y: 77.34), controlPoint1: CGPoint(x: 47.04, y: 78.21), controlPoint2: CGPoint(x: 46.64, y: 77.82))
        bezier2Path.addCurve(to: CGPoint(x: 47.53, y: 76.46), controlPoint1: CGPoint(x: 46.64, y: 76.86), controlPoint2: CGPoint(x: 47.04, y: 76.46))
        bezier2Path.addLine(to: CGPoint(x: 47.53, y: 76.46))
        bezier2Path.addLine(to: CGPoint(x: 71.47, y: 76.46))
        bezier2Path.addLine(to: CGPoint(x: 71.47, y: 76.46))
        bezier2Path.addCurve(to: CGPoint(x: 72.36, y: 77.34), controlPoint1: CGPoint(x: 71.96, y: 76.46), controlPoint2: CGPoint(x: 72.36, y: 76.86))
        bezier2Path.addCurve(to: CGPoint(x: 71.47, y: 78.21), controlPoint1: CGPoint(x: 72.36, y: 77.82), controlPoint2: CGPoint(x: 71.96, y: 78.21))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 0, y: 99, width: 120, height: 13)
        let textTextContent = "Compose Piece"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: fillColor6,
            .paragraphStyle: textStyle,
            ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 11, width: 80, height: 80))
        fillColor6.setStroke()
        oval2Path.lineWidth = 4
        oval2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHouseSaveTag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 11, width: 80, height: 80))
        fillColor6.setStroke()
        oval2Path.lineWidth = 4
        oval2Path.stroke()


        //// Group 8
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 77.99, y: 47.45))
        bezierPath.addCurve(to: CGPoint(x: 76.83, y: 45.18), controlPoint1: CGPoint(x: 77.92, y: 46.56), controlPoint2: CGPoint(x: 77.51, y: 45.75))
        bezierPath.addLine(to: CGPoint(x: 73.55, y: 42.37))
        bezierPath.addLine(to: CGPoint(x: 73.55, y: 34.39))
        bezierPath.addCurve(to: CGPoint(x: 72.43, y: 33.28), controlPoint1: CGPoint(x: 73.55, y: 33.77), controlPoint2: CGPoint(x: 73.05, y: 33.28))
        bezierPath.addLine(to: CGPoint(x: 67.98, y: 33.28))
        bezierPath.addCurve(to: CGPoint(x: 66.88, y: 34.39), controlPoint1: CGPoint(x: 67.37, y: 33.28), controlPoint2: CGPoint(x: 66.88, y: 33.78))
        bezierPath.addLine(to: CGPoint(x: 66.88, y: 36.66))
        bezierPath.addLine(to: CGPoint(x: 61.25, y: 31.88))
        bezierPath.addCurve(to: CGPoint(x: 56.91, y: 31.87), controlPoint1: CGPoint(x: 59.99, y: 30.8), controlPoint2: CGPoint(x: 58.16, y: 30.8))
        bezierPath.addLine(to: CGPoint(x: 41.17, y: 45.18))
        bezierPath.addCurve(to: CGPoint(x: 40.81, y: 49.87), controlPoint1: CGPoint(x: 39.78, y: 46.36), controlPoint2: CGPoint(x: 39.6, y: 48.46))
        bezierPath.addCurve(to: CGPoint(x: 44.47, y: 50.84), controlPoint1: CGPoint(x: 41.73, y: 50.94), controlPoint2: CGPoint(x: 43.21, y: 51.28))
        bezierPath.addLine(to: CGPoint(x: 44.47, y: 67.82))
        bezierPath.addCurve(to: CGPoint(x: 45.57, y: 68.93), controlPoint1: CGPoint(x: 44.47, y: 68.44), controlPoint2: CGPoint(x: 44.95, y: 68.93))
        bezierPath.addLine(to: CGPoint(x: 72.43, y: 68.93))
        bezierPath.addCurve(to: CGPoint(x: 73.55, y: 67.82), controlPoint1: CGPoint(x: 73.05, y: 68.93), controlPoint2: CGPoint(x: 73.55, y: 68.44))
        bezierPath.addLine(to: CGPoint(x: 73.55, y: 50.84))
        bezierPath.addCurve(to: CGPoint(x: 77.2, y: 49.87), controlPoint1: CGPoint(x: 74.85, y: 51.3), controlPoint2: CGPoint(x: 76.3, y: 50.91))
        bezierPath.addCurve(to: CGPoint(x: 77.99, y: 47.45), controlPoint1: CGPoint(x: 77.78, y: 49.19), controlPoint2: CGPoint(x: 78.06, y: 48.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 69.09, y: 35.5))
        bezierPath.addLine(to: CGPoint(x: 71.34, y: 35.5))
        bezierPath.addLine(to: CGPoint(x: 71.34, y: 40.47))
        bezierPath.addLine(to: CGPoint(x: 69.09, y: 38.56))
        bezierPath.addLine(to: CGPoint(x: 69.09, y: 35.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 63.54, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 54.47, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 54.47, y: 57.82))
        bezierPath.addLine(to: CGPoint(x: 63.54, y: 57.82))
        bezierPath.addLine(to: CGPoint(x: 63.54, y: 66.71))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 71.34, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 65.75, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 65.75, y: 56.73))
        bezierPath.addCurve(to: CGPoint(x: 64.64, y: 55.62), controlPoint1: CGPoint(x: 65.75, y: 56.11), controlPoint2: CGPoint(x: 65.26, y: 55.62))
        bezierPath.addLine(to: CGPoint(x: 53.36, y: 55.62))
        bezierPath.addCurve(to: CGPoint(x: 52.26, y: 56.73), controlPoint1: CGPoint(x: 52.75, y: 55.62), controlPoint2: CGPoint(x: 52.26, y: 56.11))
        bezierPath.addLine(to: CGPoint(x: 52.26, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 46.68, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 46.68, y: 49.24))
        bezierPath.addLine(to: CGPoint(x: 59.07, y: 38.77))
        bezierPath.addLine(to: CGPoint(x: 71.34, y: 49.23))
        bezierPath.addLine(to: CGPoint(x: 71.34, y: 66.71))
        bezierPath.addLine(to: CGPoint(x: 71.34, y: 66.71))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 75.51, y: 48.42))
        bezierPath.addCurve(to: CGPoint(x: 73.94, y: 48.55), controlPoint1: CGPoint(x: 75.11, y: 48.88), controlPoint2: CGPoint(x: 74.41, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 59.8, y: 36.47))
        bezierPath.addCurve(to: CGPoint(x: 58.35, y: 36.46), controlPoint1: CGPoint(x: 59.38, y: 36.11), controlPoint2: CGPoint(x: 58.77, y: 36.11))
        bezierPath.addCurve(to: CGPoint(x: 44.07, y: 48.54), controlPoint1: CGPoint(x: 58.05, y: 36.72), controlPoint2: CGPoint(x: 44.13, y: 48.49))
        bezierPath.addCurve(to: CGPoint(x: 42.5, y: 48.43), controlPoint1: CGPoint(x: 43.6, y: 48.94), controlPoint2: CGPoint(x: 42.9, y: 48.89))
        bezierPath.addCurve(to: CGPoint(x: 42.61, y: 46.86), controlPoint1: CGPoint(x: 42.1, y: 47.96), controlPoint2: CGPoint(x: 42.15, y: 47.26))
        bezierPath.addLine(to: CGPoint(x: 58.35, y: 33.56))
        bezierPath.addCurve(to: CGPoint(x: 59.8, y: 33.56), controlPoint1: CGPoint(x: 58.77, y: 33.2), controlPoint2: CGPoint(x: 59.38, y: 33.2))
        bezierPath.addLine(to: CGPoint(x: 75.38, y: 46.86))
        bezierPath.addCurve(to: CGPoint(x: 75.51, y: 48.42), controlPoint1: CGPoint(x: 75.85, y: 47.26), controlPoint2: CGPoint(x: 75.9, y: 47.96))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 62.8, y: 44.94))
        bezier2Path.addLine(to: CGPoint(x: 55.4, y: 44.94))
        bezier2Path.addCurve(to: CGPoint(x: 54.21, y: 46.06), controlPoint1: CGPoint(x: 54.73, y: 44.94), controlPoint2: CGPoint(x: 54.21, y: 45.44))
        bezier2Path.addLine(to: CGPoint(x: 54.21, y: 52.81))
        bezier2Path.addCurve(to: CGPoint(x: 55.4, y: 53.93), controlPoint1: CGPoint(x: 54.21, y: 53.43), controlPoint2: CGPoint(x: 54.73, y: 53.93))
        bezier2Path.addLine(to: CGPoint(x: 62.8, y: 53.93))
        bezier2Path.addCurve(to: CGPoint(x: 64, y: 52.81), controlPoint1: CGPoint(x: 63.46, y: 53.93), controlPoint2: CGPoint(x: 64, y: 53.43))
        bezier2Path.addLine(to: CGPoint(x: 64, y: 46.06))
        bezier2Path.addCurve(to: CGPoint(x: 62.8, y: 44.94), controlPoint1: CGPoint(x: 64, y: 45.44), controlPoint2: CGPoint(x: 63.46, y: 44.94))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 61.61, y: 51.68))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 51.68))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 47.19))
        bezier2Path.addLine(to: CGPoint(x: 61.61, y: 47.19))
        bezier2Path.addLine(to: CGPoint(x: 61.61, y: 51.68))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 59, y: 59.94, width: 3, height: 3))
        fillColor6.setFill()
        ovalPath.fill()




        //// Text Drawing
        let textRect = CGRect(x: 0, y: 99, width: 120, height: 12)
        let textTextContent = "Save Spot"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: fillColor6,
            .paragraphStyle: textStyle,
            ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSprayCan(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group 11
        //// Group
        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 29.55, y: 18.04, width: 1, height: 1.76))
        fillColor6.setFill()
        ovalPath.fill()






        //// Group 3
        //// Group 4
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 25.55, y: 33.45, width: 1, height: 1), cornerRadius: 0.5)
        fillColor6.setFill()
        rectanglePath.fill()






        //// Group 5
        //// Group 6
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 32.45, y: 33.45, width: 1, height: 1), cornerRadius: 0.5)
        fillColor6.setFill()
        rectangle2Path.fill()






        //// Group 7
        //// Group 8
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30.01, y: 33.98))
        bezierPath.addCurve(to: CGPoint(x: 29.68, y: 34.02), controlPoint1: CGPoint(x: 29.91, y: 33.83), controlPoint2: CGPoint(x: 29.77, y: 33.85))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 34.17), controlPoint1: CGPoint(x: 29.64, y: 34.11), controlPoint2: CGPoint(x: 29.57, y: 34.17))
        bezierPath.addCurve(to: CGPoint(x: 29.32, y: 34.02), controlPoint1: CGPoint(x: 29.43, y: 34.17), controlPoint2: CGPoint(x: 29.36, y: 34.11))
        bezierPath.addCurve(to: CGPoint(x: 28.99, y: 33.98), controlPoint1: CGPoint(x: 29.23, y: 33.85), controlPoint2: CGPoint(x: 29.09, y: 33.83))
        bezierPath.addCurve(to: CGPoint(x: 28.97, y: 34.58), controlPoint1: CGPoint(x: 28.89, y: 34.14), controlPoint2: CGPoint(x: 28.88, y: 34.4))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 35.01), controlPoint1: CGPoint(x: 29.1, y: 34.85), controlPoint2: CGPoint(x: 29.29, y: 35.01))
        bezierPath.addCurve(to: CGPoint(x: 30.03, y: 34.58), controlPoint1: CGPoint(x: 29.7, y: 35.01), controlPoint2: CGPoint(x: 29.9, y: 34.85))
        bezierPath.addCurve(to: CGPoint(x: 30.01, y: 33.98), controlPoint1: CGPoint(x: 30.11, y: 34.4), controlPoint2: CGPoint(x: 30.1, y: 34.14))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()






        //// Group 9
        //// Group 10
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 35.36, y: 41.71))
        bezier2Path.addLine(to: CGPoint(x: 35.36, y: 26.89))
        bezier2Path.addLine(to: CGPoint(x: 35.36, y: 26.89))
        bezier2Path.addCurve(to: CGPoint(x: 36.18, y: 25.78), controlPoint1: CGPoint(x: 35.83, y: 26.72), controlPoint2: CGPoint(x: 36.18, y: 26.29))
        bezier2Path.addCurve(to: CGPoint(x: 35.34, y: 24.66), controlPoint1: CGPoint(x: 36.18, y: 25.26), controlPoint2: CGPoint(x: 35.82, y: 24.82))
        bezier2Path.addCurve(to: CGPoint(x: 33.32, y: 22.29), controlPoint1: CGPoint(x: 35.2, y: 23.55), controlPoint2: CGPoint(x: 34.4, y: 22.63))
        bezier2Path.addCurve(to: CGPoint(x: 33.45, y: 21.75), controlPoint1: CGPoint(x: 33.4, y: 22.12), controlPoint2: CGPoint(x: 33.45, y: 21.94))
        bezier2Path.addCurve(to: CGPoint(x: 32.22, y: 20.57), controlPoint1: CGPoint(x: 33.45, y: 21.1), controlPoint2: CGPoint(x: 32.9, y: 20.57))
        bezier2Path.addLine(to: CGPoint(x: 31.41, y: 20.57))
        bezier2Path.addLine(to: CGPoint(x: 31.41, y: 18.05))
        bezier2Path.addCurve(to: CGPoint(x: 30.32, y: 17), controlPoint1: CGPoint(x: 31.41, y: 17.47), controlPoint2: CGPoint(x: 30.92, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 28.68, y: 17))
        bezier2Path.addCurve(to: CGPoint(x: 27.59, y: 18.05), controlPoint1: CGPoint(x: 28.08, y: 17), controlPoint2: CGPoint(x: 27.59, y: 17.47))
        bezier2Path.addLine(to: CGPoint(x: 27.59, y: 20.57))
        bezier2Path.addLine(to: CGPoint(x: 26.78, y: 20.57))
        bezier2Path.addCurve(to: CGPoint(x: 25.55, y: 21.75), controlPoint1: CGPoint(x: 26.1, y: 20.57), controlPoint2: CGPoint(x: 25.55, y: 21.1))
        bezier2Path.addCurve(to: CGPoint(x: 25.68, y: 22.29), controlPoint1: CGPoint(x: 25.55, y: 21.94), controlPoint2: CGPoint(x: 25.6, y: 22.12))
        bezier2Path.addCurve(to: CGPoint(x: 23.66, y: 24.66), controlPoint1: CGPoint(x: 24.6, y: 22.63), controlPoint2: CGPoint(x: 23.8, y: 23.55))
        bezier2Path.addCurve(to: CGPoint(x: 22.82, y: 25.78), controlPoint1: CGPoint(x: 23.18, y: 24.82), controlPoint2: CGPoint(x: 22.82, y: 25.26))
        bezier2Path.addCurve(to: CGPoint(x: 23.64, y: 26.89), controlPoint1: CGPoint(x: 22.82, y: 26.29), controlPoint2: CGPoint(x: 23.17, y: 26.72))
        bezier2Path.addLine(to: CGPoint(x: 23.64, y: 41.71))
        bezier2Path.addCurve(to: CGPoint(x: 22.82, y: 42.82), controlPoint1: CGPoint(x: 23.17, y: 41.88), controlPoint2: CGPoint(x: 22.82, y: 42.31))
        bezier2Path.addCurve(to: CGPoint(x: 24.05, y: 44), controlPoint1: CGPoint(x: 22.82, y: 43.47), controlPoint2: CGPoint(x: 23.38, y: 44))
        bezier2Path.addLine(to: CGPoint(x: 34.95, y: 44))
        bezier2Path.addCurve(to: CGPoint(x: 36.18, y: 42.82), controlPoint1: CGPoint(x: 35.62, y: 44), controlPoint2: CGPoint(x: 36.18, y: 43.47))
        bezier2Path.addCurve(to: CGPoint(x: 35.36, y: 41.71), controlPoint1: CGPoint(x: 36.18, y: 42.31), controlPoint2: CGPoint(x: 35.83, y: 41.88))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 28.41, y: 18.05))
        bezier2Path.addCurve(to: CGPoint(x: 28.68, y: 17.79), controlPoint1: CGPoint(x: 28.41, y: 17.91), controlPoint2: CGPoint(x: 28.53, y: 17.79))
        bezier2Path.addLine(to: CGPoint(x: 30.32, y: 17.79))
        bezier2Path.addCurve(to: CGPoint(x: 30.59, y: 18.05), controlPoint1: CGPoint(x: 30.47, y: 17.79), controlPoint2: CGPoint(x: 30.59, y: 17.91))
        bezier2Path.addLine(to: CGPoint(x: 30.59, y: 20.57))
        bezier2Path.addLine(to: CGPoint(x: 28.41, y: 20.57))
        bezier2Path.addLine(to: CGPoint(x: 28.41, y: 18.05))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 26.78, y: 21.36))
        bezier2Path.addLine(to: CGPoint(x: 32.22, y: 21.36))
        bezier2Path.addCurve(to: CGPoint(x: 32.62, y: 21.75), controlPoint1: CGPoint(x: 32.44, y: 21.36), controlPoint2: CGPoint(x: 32.62, y: 21.54))
        bezier2Path.addCurve(to: CGPoint(x: 32.29, y: 22.13), controlPoint1: CGPoint(x: 32.62, y: 21.94), controlPoint2: CGPoint(x: 32.48, y: 22.1))
        bezier2Path.addCurve(to: CGPoint(x: 26.71, y: 22.13), controlPoint1: CGPoint(x: 32.29, y: 22.13), controlPoint2: CGPoint(x: 26.71, y: 22.13))
        bezier2Path.addCurve(to: CGPoint(x: 26.38, y: 21.75), controlPoint1: CGPoint(x: 26.52, y: 22.1), controlPoint2: CGPoint(x: 26.38, y: 21.94))
        bezier2Path.addCurve(to: CGPoint(x: 26.78, y: 21.36), controlPoint1: CGPoint(x: 26.38, y: 21.54), controlPoint2: CGPoint(x: 26.56, y: 21.36))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 24.05, y: 25.39))
        bezier2Path.addLine(to: CGPoint(x: 31.14, y: 25.39))
        bezier2Path.addCurve(to: CGPoint(x: 31.56, y: 25), controlPoint1: CGPoint(x: 31.37, y: 25.39), controlPoint2: CGPoint(x: 31.56, y: 25.21))
        bezier2Path.addCurve(to: CGPoint(x: 31.14, y: 24.6), controlPoint1: CGPoint(x: 31.56, y: 24.78), controlPoint2: CGPoint(x: 31.37, y: 24.6))
        bezier2Path.addLine(to: CGPoint(x: 24.51, y: 24.6))
        bezier2Path.addCurve(to: CGPoint(x: 26.63, y: 22.93), controlPoint1: CGPoint(x: 24.7, y: 23.65), controlPoint2: CGPoint(x: 25.58, y: 22.93))
        bezier2Path.addCurve(to: CGPoint(x: 32.37, y: 22.93), controlPoint1: CGPoint(x: 26.68, y: 22.93), controlPoint2: CGPoint(x: 32.36, y: 22.93))
        bezier2Path.addCurve(to: CGPoint(x: 34.49, y: 24.6), controlPoint1: CGPoint(x: 33.42, y: 22.93), controlPoint2: CGPoint(x: 34.3, y: 23.65))
        bezier2Path.addLine(to: CGPoint(x: 32.8, y: 24.6))
        bezier2Path.addCurve(to: CGPoint(x: 32.38, y: 25), controlPoint1: CGPoint(x: 32.57, y: 24.6), controlPoint2: CGPoint(x: 32.38, y: 24.78))
        bezier2Path.addCurve(to: CGPoint(x: 32.8, y: 25.39), controlPoint1: CGPoint(x: 32.38, y: 25.21), controlPoint2: CGPoint(x: 32.57, y: 25.39))
        bezier2Path.addLine(to: CGPoint(x: 34.95, y: 25.39))
        bezier2Path.addCurve(to: CGPoint(x: 35.35, y: 25.78), controlPoint1: CGPoint(x: 35.17, y: 25.39), controlPoint2: CGPoint(x: 35.35, y: 25.56))
        bezier2Path.addCurve(to: CGPoint(x: 34.95, y: 26.16), controlPoint1: CGPoint(x: 35.35, y: 25.99), controlPoint2: CGPoint(x: 35.17, y: 26.16))
        bezier2Path.addLine(to: CGPoint(x: 24.05, y: 26.16))
        bezier2Path.addCurve(to: CGPoint(x: 23.65, y: 25.78), controlPoint1: CGPoint(x: 23.83, y: 26.16), controlPoint2: CGPoint(x: 23.65, y: 25.99))
        bezier2Path.addCurve(to: CGPoint(x: 24.05, y: 25.39), controlPoint1: CGPoint(x: 23.65, y: 25.56), controlPoint2: CGPoint(x: 23.83, y: 25.39))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 27.59, y: 38.35))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 38.35))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 41.64))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 41.64))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 38.35))
        bezier2Path.addLine(to: CGPoint(x: 25.94, y: 38.35))
        bezier2Path.addCurve(to: CGPoint(x: 26.35, y: 37.95), controlPoint1: CGPoint(x: 26.16, y: 38.35), controlPoint2: CGPoint(x: 26.35, y: 38.17))
        bezier2Path.addCurve(to: CGPoint(x: 25.94, y: 37.56), controlPoint1: CGPoint(x: 26.35, y: 37.74), controlPoint2: CGPoint(x: 26.16, y: 37.56))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 37.56))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 31.04))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 31.04))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 37.56))
        bezier2Path.addLine(to: CGPoint(x: 27.59, y: 37.56))
        bezier2Path.addCurve(to: CGPoint(x: 27.18, y: 37.95), controlPoint1: CGPoint(x: 27.36, y: 37.56), controlPoint2: CGPoint(x: 27.18, y: 37.74))
        bezier2Path.addCurve(to: CGPoint(x: 27.59, y: 38.35), controlPoint1: CGPoint(x: 27.18, y: 38.17), controlPoint2: CGPoint(x: 27.36, y: 38.35))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 34.53, y: 30.25))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 30.25))
        bezier2Path.addLine(to: CGPoint(x: 24.47, y: 26.96))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 26.96))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 30.25))
        bezier2Path.addLine(to: CGPoint(x: 34.53, y: 30.25))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 34.95, y: 43.21))
        bezier2Path.addLine(to: CGPoint(x: 24.05, y: 43.21))
        bezier2Path.addCurve(to: CGPoint(x: 23.65, y: 42.82), controlPoint1: CGPoint(x: 23.83, y: 43.21), controlPoint2: CGPoint(x: 23.65, y: 43.04))
        bezier2Path.addCurve(to: CGPoint(x: 24.05, y: 42.43), controlPoint1: CGPoint(x: 23.65, y: 42.61), controlPoint2: CGPoint(x: 23.83, y: 42.43))
        bezier2Path.addLine(to: CGPoint(x: 24.06, y: 42.43))
        bezier2Path.addLine(to: CGPoint(x: 34.94, y: 42.43))
        bezier2Path.addLine(to: CGPoint(x: 34.95, y: 42.43))
        bezier2Path.addCurve(to: CGPoint(x: 35.35, y: 42.82), controlPoint1: CGPoint(x: 35.17, y: 42.43), controlPoint2: CGPoint(x: 35.35, y: 42.61))
        bezier2Path.addCurve(to: CGPoint(x: 34.95, y: 43.21), controlPoint1: CGPoint(x: 35.35, y: 43.04), controlPoint2: CGPoint(x: 35.17, y: 43.21))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHalfCircleBackground(frame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 250)) {
        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + frame.width - 247, y: frame.minY + frame.height - 250, width: 469, height: 469))
        fillColor6.setFill()
        ovalPath.fill()
    }

    @objc dynamic public class func drawLocationRedMapMarker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 0.371, blue: 0.261, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.51, y: 20.26))
        bezierPath.addCurve(to: CGPoint(x: 15.34, y: 16.7), controlPoint1: CGPoint(x: 17.2, y: 20.26), controlPoint2: CGPoint(x: 15.34, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 19.51, y: 13.13), controlPoint1: CGPoint(x: 15.34, y: 14.73), controlPoint2: CGPoint(x: 17.2, y: 13.13))
        bezierPath.addCurve(to: CGPoint(x: 23.67, y: 16.7), controlPoint1: CGPoint(x: 21.81, y: 13.13), controlPoint2: CGPoint(x: 23.67, y: 14.73))
        bezierPath.addCurve(to: CGPoint(x: 19.51, y: 20.26), controlPoint1: CGPoint(x: 23.67, y: 18.67), controlPoint2: CGPoint(x: 21.81, y: 20.26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28.31, y: 9.16))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 9.16))
        bezierPath.addCurve(to: CGPoint(x: 10.46, y: 9.16), controlPoint1: CGPoint(x: 23.38, y: 4.95), controlPoint2: CGPoint(x: 15.39, y: 4.95))
        bezierPath.addCurve(to: CGPoint(x: 9.29, y: 24.42), controlPoint1: CGPoint(x: 6.02, y: 12.96), controlPoint2: CGPoint(x: 5.52, y: 20.12))
        bezierPath.addLine(to: CGPoint(x: 17.38, y: 34.43))
        bezierPath.addCurve(to: CGPoint(x: 21.38, y: 34.43), controlPoint1: CGPoint(x: 18.42, y: 35.71), controlPoint2: CGPoint(x: 20.34, y: 35.71))
        bezierPath.addLine(to: CGPoint(x: 29.48, y: 24.42))
        bezierPath.addCurve(to: CGPoint(x: 28.31, y: 9.16), controlPoint1: CGPoint(x: 33.24, y: 20.12), controlPoint2: CGPoint(x: 32.74, y: 12.96))
        bezierPath.close()
        color2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMosaicView(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 640)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Image Declarations
        let background = UIImage(named: "background.png")!

        //// Picture Drawing
        let pictureRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        let picturePath = UIBezierPath(rect: pictureRect)
        context.saveGState()
        picturePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(background.cgImage!, in: CGRect(x: pictureRect.minX, y: -pictureRect.minY, width: background.size.width, height: background.size.height), byTiling: true)
        context.restoreGState()
    }

    @objc dynamic public class func drawSquareCornerBorders(frame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 217)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 3, y: frame.minY + 3, width: 3, height: 27))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 4.38, y: frame.minY + 6.35)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3.35, height: 27.62))
        UIColor.white.setFill()
        rectangle2Path.fill()

        context.restoreGState()




        //// Group 2
        context.saveGState()
        context.translateBy(x: frame.maxX - 4, y: frame.minY + 4)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 27))
        UIColor.white.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 0.48, y: 3)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 27.62))
        UIColor.white.setFill()
        rectangle4Path.fill()

        context.restoreGState()



        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.translateBy(x: frame.minX + 5, y: frame.maxY - 3)
        context.rotate(by: -90 * CGFloat.pi/180)



        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0.2, y: 0, width: 3, height: 27))
        UIColor.white.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 0.2, y: 1.38)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 27.62))
        UIColor.white.setFill()
        rectangle6Path.fill()

        context.restoreGState()



        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.translateBy(x: frame.maxX - 4, y: frame.maxY - 4)
        context.rotate(by: -180 * CGFloat.pi/180)



        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: -0, y: -1, width: 3, height: 27))
        UIColor.white.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 1.38, y: 2.35)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3.35, height: 27.62))
        UIColor.white.setFill()
        rectangle8Path.fill()

        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawTagLiftedBackground(frame: CGRect = CGRect(x: 0, y: 0, width: 273, height: 273)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let fillColor8 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 0.929, green: 0.910, blue: 0.929, alpha: 1.000)


        //// Subframes
        let group2: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.01841 + 0.47) + 0.03, y: frame.minY + fastFloor(frame.height * 0.02201 + 0.49) + 0.01, width: fastFloor(frame.width * 0.98086 - 0.27) - fastFloor(frame.width * 0.01841 + 0.47) + 0.75, height: fastFloor(frame.height * 0.98428 - 0.21) - fastFloor(frame.height * 0.02201 + 0.49) + 0.7)


        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: group2.minX + fastFloor(group2.width * 0.00000 + 0.5), y: group2.minY + fastFloor(group2.height * 0.00000 + 0.5), width: fastFloor(group2.width * 0.95737 - 0.05) - fastFloor(group2.width * 0.00000 + 0.5) + 0.55, height: fastFloor(group2.height * 0.95756 - 0.05) - fastFloor(group2.height * 0.00000 + 0.5) + 0.55))
        fillColor8.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: group2.minX + fastFloor(group2.width * 0.01903 + 0.5), y: group2.minY + fastFloor(group2.height * 0.01903 + 0.5), width: fastFloor(group2.width * 0.97640 - 0.05) - fastFloor(group2.width * 0.01903 + 0.5) + 0.55, height: fastFloor(group2.height * 0.97659 - 0.05) - fastFloor(group2.height * 0.01903 + 0.5) + 0.55))
        fillColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: group2.minX + fastFloor(group2.width * 0.04263 + 0.3) + 0.2, y: group2.minY + fastFloor(group2.height * 0.04244 + 0.35) + 0.15, width: fastFloor(group2.width * 1.00000 - 0.25) - fastFloor(group2.width * 0.04263 + 0.3) + 0.55, height: fastFloor(group2.height * 1.00000 - 0.2) - fastFloor(group2.height * 0.04244 + 0.35) + 0.55))
        fillColor8.setFill()
        rectangle3Path.fill()
    }

    @objc dynamic public class func drawNoPosts(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 500)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor13 = UIColor(red: 0.529, green: 0.804, blue: 0.686, alpha: 1.000)
        let fillColor14 = UIColor(red: 0.678, green: 0.847, blue: 0.769, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.973, green: 0.667, blue: 0.573, alpha: 1.000)
        let fillColor16 = UIColor(red: 0.988, green: 0.827, blue: 0.792, alpha: 1.000)
        let textForeground = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)


        //// Subframes
        let group5: CGRect = CGRect(x: frame.minX + 31, y: frame.minY + 5.2, width: frame.width - 50.4, height: frame.height - 62.2)


        //// Group 5
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: group5.minX + fastFloor(group5.width * 0.07567 + 0.1) + 0.4, y: group5.minY + fastFloor(group5.height * 0.36912 - 0.1) + 0.6, width: fastFloor(group5.width * 0.11128 + 0.5) - fastFloor(group5.width * 0.07567 + 0.1) - 0.4, height: fastFloor(group5.height * 0.39104 + 0.3) - fastFloor(group5.height * 0.36912 - 0.1) - 0.4))
        fillColor16.setFill()
        oval3Path.fill()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group5.minX + 0.72218 * group5.width, y: group5.minY + 0.75263 * group5.height))
        bezierPath.addLine(to: CGPoint(x: group5.minX + 0.37055 * group5.width, y: group5.minY + 0.71220 * group5.height))
        bezierPath.addCurve(to: CGPoint(x: group5.minX + 0.35015 * group5.width, y: group5.minY + 0.69392 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.35682 * group5.width, y: group5.minY + 0.71060 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.34755 * group5.width, y: group5.minY + 0.70238 * group5.height))
        bezierPath.addLine(to: CGPoint(x: group5.minX + 0.46217 * group5.width, y: group5.minY + 0.32503 * group5.height))
        bezierPath.addCurve(to: CGPoint(x: group5.minX + 0.49184 * group5.width, y: group5.minY + 0.31247 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.46476 * group5.width, y: group5.minY + 0.31658 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.47812 * group5.width, y: group5.minY + 0.31087 * group5.height))
        bezierPath.addLine(to: CGPoint(x: group5.minX + 0.84310 * group5.width, y: group5.minY + 0.35290 * group5.height))
        bezierPath.addCurve(to: CGPoint(x: group5.minX + 0.86350 * group5.width, y: group5.minY + 0.37117 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.85682 * group5.width, y: group5.minY + 0.35450 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.86610 * group5.width, y: group5.minY + 0.36272 * group5.height))
        bezierPath.addLine(to: CGPoint(x: group5.minX + 0.75148 * group5.width, y: group5.minY + 0.74006 * group5.height))
        bezierPath.addCurve(to: CGPoint(x: group5.minX + 0.72218 * group5.width, y: group5.minY + 0.75263 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.74926 * group5.width, y: group5.minY + 0.74874 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.73591 * group5.width, y: group5.minY + 0.75423 * group5.height))
        bezierPath.close()
        fillColor13.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group5.minX + 0.61276 * group5.width, y: group5.minY + 0.63842 * group5.height))
        bezier2Path.addLine(to: CGPoint(x: group5.minX + 0.43657 * group5.width, y: group5.minY + 0.61809 * group5.height))
        bezier2Path.addCurve(to: CGPoint(x: group5.minX + 0.42990 * group5.width, y: group5.minY + 0.62083 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.43361 * group5.width, y: group5.minY + 0.61763 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.43064 * group5.width, y: group5.minY + 0.61900 * group5.height))
        bezier2Path.addLine(to: CGPoint(x: group5.minX + 0.42693 * group5.width, y: group5.minY + 0.63020 * group5.height))
        bezier2Path.addCurve(to: CGPoint(x: group5.minX + 0.43138 * group5.width, y: group5.minY + 0.63431 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.42619 * group5.width, y: group5.minY + 0.63202 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.42841 * group5.width, y: group5.minY + 0.63385 * group5.height))
        bezier2Path.addLine(to: CGPoint(x: group5.minX + 0.60757 * group5.width, y: group5.minY + 0.65464 * group5.height))
        bezier2Path.addCurve(to: CGPoint(x: group5.minX + 0.61424 * group5.width, y: group5.minY + 0.65190 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.61053 * group5.width, y: group5.minY + 0.65509 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.61350 * group5.width, y: group5.minY + 0.65372 * group5.height))
        bezier2Path.addLine(to: CGPoint(x: group5.minX + 0.61721 * group5.width, y: group5.minY + 0.64253 * group5.height))
        bezier2Path.addCurve(to: CGPoint(x: group5.minX + 0.61276 * group5.width, y: group5.minY + 0.63842 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.61795 * group5.width, y: group5.minY + 0.64070 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.61610 * group5.width, y: group5.minY + 0.63888 * group5.height))
        bezier2Path.close()
        fillColor14.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: group5.minX + 0.69770 * group5.width, y: group5.minY + 0.70694 * group5.height))
        bezier3Path.addLine(to: CGPoint(x: group5.minX + 0.41840 * group5.width, y: group5.minY + 0.67474 * group5.height))
        bezier3Path.addCurve(to: CGPoint(x: group5.minX + 0.41395 * group5.width, y: group5.minY + 0.67063 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41543 * group5.width, y: group5.minY + 0.67428 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.41320 * group5.width, y: group5.minY + 0.67245 * group5.height))
        bezier3Path.addLine(to: CGPoint(x: group5.minX + 0.41432 * group5.width, y: group5.minY + 0.66926 * group5.height))
        bezier3Path.addCurve(to: CGPoint(x: group5.minX + 0.42099 * group5.width, y: group5.minY + 0.66651 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41506 * group5.width, y: group5.minY + 0.66743 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.41803 * group5.width, y: group5.minY + 0.66606 * group5.height))
        bezier3Path.addLine(to: CGPoint(x: group5.minX + 0.70030 * group5.width, y: group5.minY + 0.69872 * group5.height))
        bezier3Path.addCurve(to: CGPoint(x: group5.minX + 0.70475 * group5.width, y: group5.minY + 0.70283 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.70326 * group5.width, y: group5.minY + 0.69918 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.70549 * group5.width, y: group5.minY + 0.70101 * group5.height))
        bezier3Path.addLine(to: CGPoint(x: group5.minX + 0.70438 * group5.width, y: group5.minY + 0.70420 * group5.height))
        bezier3Path.addCurve(to: CGPoint(x: group5.minX + 0.69770 * group5.width, y: group5.minY + 0.70694 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.70401 * group5.width, y: group5.minY + 0.70603 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.70104 * group5.width, y: group5.minY + 0.70717 * group5.height))
        bezier3Path.close()
        fillColor14.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: group5.minX + 0.62315 * group5.width, y: group5.minY + 0.71494 * group5.height))
        bezier4Path.addLine(to: CGPoint(x: group5.minX + 0.41358 * group5.width, y: group5.minY + 0.69073 * group5.height))
        bezier4Path.addCurve(to: CGPoint(x: group5.minX + 0.40912 * group5.width, y: group5.minY + 0.68661 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41061 * group5.width, y: group5.minY + 0.69027 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.40838 * group5.width, y: group5.minY + 0.68844 * group5.height))
        bezier4Path.addLine(to: CGPoint(x: group5.minX + 0.40950 * group5.width, y: group5.minY + 0.68524 * group5.height))
        bezier4Path.addCurve(to: CGPoint(x: group5.minX + 0.41617 * group5.width, y: group5.minY + 0.68250 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41024 * group5.width, y: group5.minY + 0.68342 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.41320 * group5.width, y: group5.minY + 0.68205 * group5.height))
        bezier4Path.addLine(to: CGPoint(x: group5.minX + 0.62574 * group5.width, y: group5.minY + 0.70672 * group5.height))
        bezier4Path.addCurve(to: CGPoint(x: group5.minX + 0.63019 * group5.width, y: group5.minY + 0.71083 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.62871 * group5.width, y: group5.minY + 0.70717 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.63093 * group5.width, y: group5.minY + 0.70900 * group5.height))
        bezier4Path.addLine(to: CGPoint(x: group5.minX + 0.62982 * group5.width, y: group5.minY + 0.71220 * group5.height))
        bezier4Path.addCurve(to: CGPoint(x: group5.minX + 0.62315 * group5.width, y: group5.minY + 0.71494 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.62908 * group5.width, y: group5.minY + 0.71402 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.62611 * group5.width, y: group5.minY + 0.71540 * group5.height))
        bezier4Path.close()
        fillColor14.setFill()
        bezier4Path.fill()


        //// Group 2
        //// Group 3
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: group5.minX + 0.51447 * group5.width, y: group5.minY + 0.45660 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.49592 * group5.width, y: group5.minY + 0.51736 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.51818 * group5.width, y: group5.minY + 0.53723 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.49295 * group5.width, y: group5.minY + 0.52672 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.50297 * group5.width, y: group5.minY + 0.53563 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.68694 * group5.width, y: group5.minY + 0.55665 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.71921 * group5.width, y: group5.minY + 0.54294 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.70215 * group5.width, y: group5.minY + 0.55847 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.71662 * group5.width, y: group5.minY + 0.55231 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.73776 * group5.width, y: group5.minY + 0.48218 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.71662 * group5.width, y: group5.minY + 0.46323 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.74036 * group5.width, y: group5.minY + 0.47328 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.73108 * group5.width, y: group5.minY + 0.46482 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.68027 * group5.width, y: group5.minY + 0.45911 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.68027 * group5.width, y: group5.minY + 0.45660 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.65245 * group5.width, y: group5.minY + 0.43696 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.67953 * group5.width, y: group5.minY + 0.44678 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.66803 * group5.width, y: group5.minY + 0.43878 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.62018 * group5.width, y: group5.minY + 0.43330 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.58272 * group5.width, y: group5.minY + 0.44541 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.60460 * group5.width, y: group5.minY + 0.43148 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.58939 * group5.width, y: group5.minY + 0.43650 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.58123 * group5.width, y: group5.minY + 0.44769 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.54488 * group5.width, y: group5.minY + 0.44358 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.51447 * group5.width, y: group5.minY + 0.45660 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.53079 * group5.width, y: group5.minY + 0.44198 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.51706 * group5.width, y: group5.minY + 0.44792 * group5.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group5.minX + 0.58383 * group5.width, y: group5.minY + 0.45523 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.59013 * group5.width, y: group5.minY + 0.45317 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.58642 * group5.width, y: group5.minY + 0.45546 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.58902 * group5.width, y: group5.minY + 0.45477 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.59347 * group5.width, y: group5.minY + 0.44838 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.61832 * group5.width, y: group5.minY + 0.44038 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.59755 * group5.width, y: group5.minY + 0.44244 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.60794 * group5.width, y: group5.minY + 0.43924 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.65059 * group5.width, y: group5.minY + 0.44404 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.66914 * group5.width, y: group5.minY + 0.45706 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.66098 * group5.width, y: group5.minY + 0.44518 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.66840 * group5.width, y: group5.minY + 0.45066 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.66951 * group5.width, y: group5.minY + 0.46231 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.67396 * group5.width, y: group5.minY + 0.46551 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.66951 * group5.width, y: group5.minY + 0.46391 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.67136 * group5.width, y: group5.minY + 0.46528 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.71476 * group5.width, y: group5.minY + 0.47031 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.72663 * group5.width, y: group5.minY + 0.48104 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.72292 * group5.width, y: group5.minY + 0.47122 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.72849 * group5.width, y: group5.minY + 0.47602 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.70809 * group5.width, y: group5.minY + 0.54180 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.68880 * group5.width, y: group5.minY + 0.54979 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.70660 * group5.width, y: group5.minY + 0.54728 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.69770 * group5.width, y: group5.minY + 0.55094 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.52003 * group5.width, y: group5.minY + 0.53038 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.50705 * group5.width, y: group5.minY + 0.51850 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.51113 * group5.width, y: group5.minY + 0.52947 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.50519 * group5.width, y: group5.minY + 0.52398 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.52559 * group5.width, y: group5.minY + 0.45774 * group5.height))
        bezier5Path.addCurve(to: CGPoint(x: group5.minX + 0.54303 * group5.width, y: group5.minY + 0.45043 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.52708 * group5.width, y: group5.minY + 0.45272 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.53487 * group5.width, y: group5.minY + 0.44929 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.58383 * group5.width, y: group5.minY + 0.45523 * group5.height))
        bezier5Path.addLine(to: CGPoint(x: group5.minX + 0.58383 * group5.width, y: group5.minY + 0.45523 * group5.height))
        bezier5Path.close()
        fillColor13.setFill()
        bezier5Path.fill()
        strokeColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: group5.minX + fastFloor(group5.width * 0.54284 + 0.15) + 0.35, y: group5.minY + fastFloor(group5.height * 0.46197 + 0.25) + 0.25, width: fastFloor(group5.width * 0.55842 - 0.05) - fastFloor(group5.width * 0.54284 + 0.15) + 0.2, height: fastFloor(group5.height * 0.47156 + 0.05) - fastFloor(group5.height * 0.46197 + 0.25) + 0.2))
        fillColor13.setFill()
        ovalPath.fill()
        strokeColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: group5.minX + 0.60794 * group5.width, y: group5.minY + 0.52947 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.66358 * group5.width, y: group5.minY + 0.50594 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.63390 * group5.width, y: group5.minY + 0.53243 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.65875 * group5.width, y: group5.minY + 0.52193 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.62537 * group5.width, y: group5.minY + 0.47168 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.66840 * group5.width, y: group5.minY + 0.48995 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.65134 * group5.width, y: group5.minY + 0.47465 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.56973 * group5.width, y: group5.minY + 0.49520 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.59941 * group5.width, y: group5.minY + 0.46871 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.57455 * group5.width, y: group5.minY + 0.47921 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.60794 * group5.width, y: group5.minY + 0.52947 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.56491 * group5.width, y: group5.minY + 0.51119 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.58234 * group5.width, y: group5.minY + 0.52650 * group5.height))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: group5.minX + 0.62352 * group5.width, y: group5.minY + 0.47853 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.65245 * group5.width, y: group5.minY + 0.50457 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.64318 * group5.width, y: group5.minY + 0.48081 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.65616 * group5.width, y: group5.minY + 0.49246 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.61016 * group5.width, y: group5.minY + 0.52238 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.64874 * group5.width, y: group5.minY + 0.51667 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.62982 * group5.width, y: group5.minY + 0.52467 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.58123 * group5.width, y: group5.minY + 0.49635 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.59050 * group5.width, y: group5.minY + 0.52010 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.57752 * group5.width, y: group5.minY + 0.50845 * group5.height))
        bezier6Path.addCurve(to: CGPoint(x: group5.minX + 0.62352 * group5.width, y: group5.minY + 0.47853 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.58457 * group5.width, y: group5.minY + 0.48424 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.60386 * group5.width, y: group5.minY + 0.47624 * group5.height))
        bezier6Path.close()
        fillColor13.setFill()
        bezier6Path.fill()
        strokeColor.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()






        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: group5.minX + fastFloor(group5.width * 0.49481 + 0.1) + 0.4, y: group5.minY + fastFloor(group5.height * 0.33485 - 0.1) + 0.6, width: fastFloor(group5.width * 0.53042 + 0.5) - fastFloor(group5.width * 0.49481 + 0.1) - 0.4, height: fastFloor(group5.height * 0.35678 + 0.3) - fastFloor(group5.height * 0.33485 - 0.1) - 0.4))
        fillColor14.setFill()
        oval2Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: group5.minX + 0.81306 * group5.width, y: group5.minY + 0.38693 * group5.height))
        bezier7Path.addLine(to: CGPoint(x: group5.minX + 0.75519 * group5.width, y: group5.minY + 0.38031 * group5.height))
        bezier7Path.addCurve(to: CGPoint(x: group5.minX + 0.75037 * group5.width, y: group5.minY + 0.37597 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.75185 * group5.width, y: group5.minY + 0.37985 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.74963 * group5.width, y: group5.minY + 0.37803 * group5.height))
        bezier7Path.addLine(to: CGPoint(x: group5.minX + 0.75185 * group5.width, y: group5.minY + 0.37072 * group5.height))
        bezier7Path.addCurve(to: CGPoint(x: group5.minX + 0.75890 * group5.width, y: group5.minY + 0.36775 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.75260 * group5.width, y: group5.minY + 0.36866 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.75556 * group5.width, y: group5.minY + 0.36729 * group5.height))
        bezier7Path.addLine(to: CGPoint(x: group5.minX + 0.81677 * group5.width, y: group5.minY + 0.37437 * group5.height))
        bezier7Path.addCurve(to: CGPoint(x: group5.minX + 0.82159 * group5.width, y: group5.minY + 0.37871 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.82010 * group5.width, y: group5.minY + 0.37483 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.82233 * group5.width, y: group5.minY + 0.37666 * group5.height))
        bezier7Path.addLine(to: CGPoint(x: group5.minX + 0.82010 * group5.width, y: group5.minY + 0.38397 * group5.height))
        bezier7Path.addCurve(to: CGPoint(x: group5.minX + 0.81306 * group5.width, y: group5.minY + 0.38693 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.81936 * group5.width, y: group5.minY + 0.38602 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.81639 * group5.width, y: group5.minY + 0.38739 * group5.height))
        bezier7Path.close()
        fillColor14.setFill()
        bezier7Path.fill()




        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: group5.minX + 0.53338 * group5.width, y: group5.minY + 0.70946 * group5.height))
        bezier8Path.addLine(to: CGPoint(x: group5.minX + 0.18398 * group5.width, y: group5.minY + 0.75560 * group5.height))
        bezier8Path.addCurve(to: CGPoint(x: group5.minX + 0.15393 * group5.width, y: group5.minY + 0.74349 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.17025 * group5.width, y: group5.minY + 0.75742 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.15690 * group5.width, y: group5.minY + 0.75194 * group5.height))
        bezier8Path.addLine(to: CGPoint(x: group5.minX + 0.02634 * group5.width, y: group5.minY + 0.37666 * group5.height))
        bezier8Path.addCurve(to: CGPoint(x: group5.minX + 0.04599 * group5.width, y: group5.minY + 0.35815 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.02337 * group5.width, y: group5.minY + 0.36820 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.03227 * group5.width, y: group5.minY + 0.35998 * group5.height))
        bezier8Path.addLine(to: CGPoint(x: group5.minX + 0.39540 * group5.width, y: group5.minY + 0.31201 * group5.height))
        bezier8Path.addCurve(to: CGPoint(x: group5.minX + 0.42545 * group5.width, y: group5.minY + 0.32412 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.40912 * group5.width, y: group5.minY + 0.31019 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.42248 * group5.width, y: group5.minY + 0.31567 * group5.height))
        bezier8Path.addLine(to: CGPoint(x: group5.minX + 0.55304 * group5.width, y: group5.minY + 0.69095 * group5.height))
        bezier8Path.addCurve(to: CGPoint(x: group5.minX + 0.53338 * group5.width, y: group5.minY + 0.70946 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.55601 * group5.width, y: group5.minY + 0.69941 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.54711 * group5.width, y: group5.minY + 0.70763 * group5.height))
        bezier8Path.close()
        fillColor15.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: group5.minX + 0.36128 * group5.width, y: group5.minY + 0.62997 * group5.height))
        bezier9Path.addLine(to: CGPoint(x: group5.minX + 0.18583 * group5.width, y: group5.minY + 0.65304 * group5.height))
        bezier9Path.addCurve(to: CGPoint(x: group5.minX + 0.18138 * group5.width, y: group5.minY + 0.65715 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.18286 * group5.width, y: group5.minY + 0.65349 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.18064 * group5.width, y: group5.minY + 0.65532 * group5.height))
        bezier9Path.addLine(to: CGPoint(x: group5.minX + 0.18472 * group5.width, y: group5.minY + 0.66651 * group5.height))
        bezier9Path.addCurve(to: CGPoint(x: group5.minX + 0.19139 * group5.width, y: group5.minY + 0.66926 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.18546 * group5.width, y: group5.minY + 0.66834 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.18843 * group5.width, y: group5.minY + 0.66971 * group5.height))
        bezier9Path.addLine(to: CGPoint(x: group5.minX + 0.36684 * group5.width, y: group5.minY + 0.64619 * group5.height))
        bezier9Path.addCurve(to: CGPoint(x: group5.minX + 0.37129 * group5.width, y: group5.minY + 0.64207 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.36981 * group5.width, y: group5.minY + 0.64573 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.37203 * group5.width, y: group5.minY + 0.64390 * group5.height))
        bezier9Path.addLine(to: CGPoint(x: group5.minX + 0.36795 * group5.width, y: group5.minY + 0.63271 * group5.height))
        bezier9Path.addCurve(to: CGPoint(x: group5.minX + 0.36128 * group5.width, y: group5.minY + 0.62997 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.36758 * group5.width, y: group5.minY + 0.63088 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.36424 * group5.width, y: group5.minY + 0.62974 * group5.height))
        bezier9Path.close()
        fillColor16.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: group5.minX + 0.48257 * group5.width, y: group5.minY + 0.67291 * group5.height))
        bezier10Path.addLine(to: CGPoint(x: group5.minX + 0.20475 * group5.width, y: group5.minY + 0.70946 * group5.height))
        bezier10Path.addCurve(to: CGPoint(x: group5.minX + 0.19807 * group5.width, y: group5.minY + 0.70672 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20178 * group5.width, y: group5.minY + 0.70991 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.19844 * group5.width, y: group5.minY + 0.70854 * group5.height))
        bezier10Path.addLine(to: CGPoint(x: group5.minX + 0.19770 * group5.width, y: group5.minY + 0.70534 * group5.height))
        bezier10Path.addCurve(to: CGPoint(x: group5.minX + 0.20215 * group5.width, y: group5.minY + 0.70123 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.19696 * group5.width, y: group5.minY + 0.70352 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.19918 * group5.width, y: group5.minY + 0.70146 * group5.height))
        bezier10Path.addLine(to: CGPoint(x: group5.minX + 0.47997 * group5.width, y: group5.minY + 0.66469 * group5.height))
        bezier10Path.addCurve(to: CGPoint(x: group5.minX + 0.48665 * group5.width, y: group5.minY + 0.66743 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.48294 * group5.width, y: group5.minY + 0.66423 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.48628 * group5.width, y: group5.minY + 0.66560 * group5.height))
        bezier10Path.addLine(to: CGPoint(x: group5.minX + 0.48702 * group5.width, y: group5.minY + 0.66880 * group5.height))
        bezier10Path.addCurve(to: CGPoint(x: group5.minX + 0.48257 * group5.width, y: group5.minY + 0.67291 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.48776 * group5.width, y: group5.minY + 0.67063 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.48553 * group5.width, y: group5.minY + 0.67245 * group5.height))
        bezier10Path.close()
        fillColor16.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: group5.minX + 0.41877 * group5.width, y: group5.minY + 0.69804 * group5.height))
        bezier11Path.addLine(to: CGPoint(x: group5.minX + 0.21031 * group5.width, y: group5.minY + 0.72545 * group5.height))
        bezier11Path.addCurve(to: CGPoint(x: group5.minX + 0.20364 * group5.width, y: group5.minY + 0.72270 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20734 * group5.width, y: group5.minY + 0.72590 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20401 * group5.width, y: group5.minY + 0.72453 * group5.height))
        bezier11Path.addLine(to: CGPoint(x: group5.minX + 0.20326 * group5.width, y: group5.minY + 0.72133 * group5.height))
        bezier11Path.addCurve(to: CGPoint(x: group5.minX + 0.20772 * group5.width, y: group5.minY + 0.71722 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20252 * group5.width, y: group5.minY + 0.71951 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20475 * group5.width, y: group5.minY + 0.71745 * group5.height))
        bezier11Path.addLine(to: CGPoint(x: group5.minX + 0.41617 * group5.width, y: group5.minY + 0.68981 * group5.height))
        bezier11Path.addCurve(to: CGPoint(x: group5.minX + 0.42285 * group5.width, y: group5.minY + 0.69255 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41914 * group5.width, y: group5.minY + 0.68936 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.42248 * group5.width, y: group5.minY + 0.69073 * group5.height))
        bezier11Path.addLine(to: CGPoint(x: group5.minX + 0.42322 * group5.width, y: group5.minY + 0.69392 * group5.height))
        bezier11Path.addCurve(to: CGPoint(x: group5.minX + 0.41877 * group5.width, y: group5.minY + 0.69804 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.42359 * group5.width, y: group5.minY + 0.69575 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.42174 * group5.width, y: group5.minY + 0.69781 * group5.height))
        bezier11Path.close()
        fillColor16.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: group5.minX + 0.38687 * group5.width, y: group5.minY + 0.52124 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.33309 * group5.width, y: group5.minY + 0.51279 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.32307 * group5.width, y: group5.minY + 0.50640 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32789 * group5.width, y: group5.minY + 0.51188 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32418 * group5.width, y: group5.minY + 0.50959 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.31936 * group5.width, y: group5.minY + 0.49589 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.32196 * group5.width, y: group5.minY + 0.49246 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32010 * group5.width, y: group5.minY + 0.49475 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32122 * group5.width, y: group5.minY + 0.49360 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.33049 * group5.width, y: group5.minY + 0.47236 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32641 * group5.width, y: group5.minY + 0.48607 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32938 * group5.width, y: group5.minY + 0.47944 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.33828 * group5.width, y: group5.minY + 0.45957 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.33680 * group5.width, y: group5.minY + 0.46939 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.34013 * group5.width, y: group5.minY + 0.46437 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.33383 * group5.width, y: group5.minY + 0.44701 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.32604 * group5.width, y: group5.minY + 0.43947 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.33272 * group5.width, y: group5.minY + 0.44404 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.33012 * group5.width, y: group5.minY + 0.44130 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.32010 * group5.width, y: group5.minY + 0.42280 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.30230 * group5.width, y: group5.minY + 0.40384 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.31973 * group5.width, y: group5.minY + 0.42097 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.31751 * group5.width, y: group5.minY + 0.41069 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.24815 * group5.width, y: group5.minY + 0.39950 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.28932 * group5.width, y: group5.minY + 0.39790 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.27114 * group5.width, y: group5.minY + 0.39630 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.20178 * group5.width, y: group5.minY + 0.41709 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.22515 * group5.width, y: group5.minY + 0.40247 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20957 * group5.width, y: group5.minY + 0.40841 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.19807 * group5.width, y: group5.minY + 0.43878 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.19288 * group5.width, y: group5.minY + 0.42714 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.19733 * group5.width, y: group5.minY + 0.43719 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.20401 * group5.width, y: group5.minY + 0.45546 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.20178 * group5.width, y: group5.minY + 0.46437 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20141 * group5.width, y: group5.minY + 0.45820 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20067 * group5.width, y: group5.minY + 0.46140 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.20623 * group5.width, y: group5.minY + 0.47693 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.21736 * group5.width, y: group5.minY + 0.48561 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20772 * group5.width, y: group5.minY + 0.48081 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.21142 * group5.width, y: group5.minY + 0.48401 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.24295 * group5.width, y: group5.minY + 0.50594 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.22589 * group5.width, y: group5.minY + 0.49635 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.23850 * group5.width, y: group5.minY + 0.50365 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.24666 * group5.width, y: group5.minY + 0.51622 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.24221 * group5.width, y: group5.minY + 0.52444 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.24777 * group5.width, y: group5.minY + 0.51919 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.24592 * group5.width, y: group5.minY + 0.52238 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.20215 * group5.width, y: group5.minY + 0.54568 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.18694 * group5.width, y: group5.minY + 0.57355 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.18917 * group5.width, y: group5.minY + 0.55254 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.18323 * group5.width, y: group5.minY + 0.56327 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.19028 * group5.width, y: group5.minY + 0.58360 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.31343 * group5.width, y: group5.minY + 0.58703 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.19547 * group5.width, y: group5.minY + 0.59845 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.27300 * group5.width, y: group5.minY + 0.59228 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.42359 * group5.width, y: group5.minY + 0.55299 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.35386 * group5.width, y: group5.minY + 0.58177 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.42878 * group5.width, y: group5.minY + 0.56761 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.42025 * group5.width, y: group5.minY + 0.54340 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.38687 * group5.width, y: group5.minY + 0.52124 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41728 * group5.width, y: group5.minY + 0.53221 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.40430 * group5.width, y: group5.minY + 0.52398 * group5.height))
        bezier12Path.close()
        bezier12Path.move(to: CGPoint(x: group5.minX + 0.41432 * group5.width, y: group5.minY + 0.55391 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.31194 * group5.width, y: group5.minY + 0.58040 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.41580 * group5.width, y: group5.minY + 0.55825 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.38093 * group5.width, y: group5.minY + 0.57127 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.20104 * group5.width, y: group5.minY + 0.58200 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.24295 * group5.width, y: group5.minY + 0.58954 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20252 * group5.width, y: group5.minY + 0.58611 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.19770 * group5.width, y: group5.minY + 0.57195 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.20957 * group5.width, y: group5.minY + 0.55025 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.19473 * group5.width, y: group5.minY + 0.56396 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.19955 * group5.width, y: group5.minY + 0.55550 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.24963 * group5.width, y: group5.minY + 0.52901 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.25742 * group5.width, y: group5.minY + 0.51462 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.25631 * group5.width, y: group5.minY + 0.52535 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.25927 * group5.width, y: group5.minY + 0.51987 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.25297 * group5.width, y: group5.minY + 0.50206 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.25148 * group5.width, y: group5.minY + 0.50137 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.22663 * group5.width, y: group5.minY + 0.48150 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.25148 * group5.width, y: group5.minY + 0.50137 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.23553 * group5.width, y: group5.minY + 0.49360 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.22589 * group5.width, y: group5.minY + 0.48036 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.22404 * group5.width, y: group5.minY + 0.47990 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.21736 * group5.width, y: group5.minY + 0.47533 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.22070 * group5.width, y: group5.minY + 0.47921 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.21810 * group5.width, y: group5.minY + 0.47739 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.21291 * group5.width, y: group5.minY + 0.46277 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.21476 * group5.width, y: group5.minY + 0.45774 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.21217 * group5.width, y: group5.minY + 0.46094 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.21291 * group5.width, y: group5.minY + 0.45911 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.21625 * group5.width, y: group5.minY + 0.45660 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.20957 * group5.width, y: group5.minY + 0.43719 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.20920 * group5.width, y: group5.minY + 0.43673 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.21180 * group5.width, y: group5.minY + 0.42005 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.20920 * group5.width, y: group5.minY + 0.43673 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.20438 * group5.width, y: group5.minY + 0.42828 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.25148 * group5.width, y: group5.minY + 0.40544 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.21810 * group5.width, y: group5.minY + 0.41297 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.23145 * group5.width, y: group5.minY + 0.40818 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.29711 * group5.width, y: group5.minY + 0.40863 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.27114 * group5.width, y: group5.minY + 0.40292 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.28672 * group5.width, y: group5.minY + 0.40384 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.31083 * group5.width, y: group5.minY + 0.42325 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.30935 * group5.width, y: group5.minY + 0.41412 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.31083 * group5.width, y: group5.minY + 0.42325 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.31788 * group5.width, y: group5.minY + 0.44312 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.31973 * group5.width, y: group5.minY + 0.44381 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.32455 * group5.width, y: group5.minY + 0.44792 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32233 * group5.width, y: group5.minY + 0.44472 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32418 * group5.width, y: group5.minY + 0.44632 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.32901 * group5.width, y: group5.minY + 0.46048 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.32381 * group5.width, y: group5.minY + 0.46734 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.33012 * group5.width, y: group5.minY + 0.46323 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32789 * group5.width, y: group5.minY + 0.46597 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.32159 * group5.width, y: group5.minY + 0.46825 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.32122 * group5.width, y: group5.minY + 0.46985 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.31306 * group5.width, y: group5.minY + 0.48949 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32010 * group5.width, y: group5.minY + 0.47670 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.31751 * group5.width, y: group5.minY + 0.48355 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.31009 * group5.width, y: group5.minY + 0.49338 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.31194 * group5.width, y: group5.minY + 0.49109 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.31083 * group5.width, y: group5.minY + 0.49246 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.30898 * group5.width, y: group5.minY + 0.49452 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.31343 * group5.width, y: group5.minY + 0.50731 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.33086 * group5.width, y: group5.minY + 0.51850 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.31528 * group5.width, y: group5.minY + 0.51279 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.32196 * group5.width, y: group5.minY + 0.51713 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.38464 * group5.width, y: group5.minY + 0.52695 * group5.height))
        bezier12Path.addCurve(to: CGPoint(x: group5.minX + 0.41098 * group5.width, y: group5.minY + 0.54408 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.39800 * group5.width, y: group5.minY + 0.52901 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.40838 * group5.width, y: group5.minY + 0.53563 * group5.height))
        bezier12Path.addLine(to: CGPoint(x: group5.minX + 0.41432 * group5.width, y: group5.minY + 0.55391 * group5.height))
        bezier12Path.close()
        strokeColor.setStroke()
        bezier12Path.lineWidth = 1
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: group5.minX + 0.39651 * group5.width, y: group5.minY + 0.34673 * group5.height))
        bezier13Path.addLine(to: CGPoint(x: group5.minX + 0.33902 * group5.width, y: group5.minY + 0.35427 * group5.height))
        bezier13Path.addCurve(to: CGPoint(x: group5.minX + 0.33160 * group5.width, y: group5.minY + 0.35130 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.33568 * group5.width, y: group5.minY + 0.35473 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.33234 * group5.width, y: group5.minY + 0.35336 * group5.height))
        bezier13Path.addLine(to: CGPoint(x: group5.minX + 0.32975 * group5.width, y: group5.minY + 0.34605 * group5.height))
        bezier13Path.addCurve(to: CGPoint(x: group5.minX + 0.33457 * group5.width, y: group5.minY + 0.34148 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.32901 * group5.width, y: group5.minY + 0.34399 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.33123 * group5.width, y: group5.minY + 0.34194 * group5.height))
        bezier13Path.addLine(to: CGPoint(x: group5.minX + 0.39206 * group5.width, y: group5.minY + 0.33394 * group5.height))
        bezier13Path.addCurve(to: CGPoint(x: group5.minX + 0.39948 * group5.width, y: group5.minY + 0.33691 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.39540 * group5.width, y: group5.minY + 0.33349 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.39874 * group5.width, y: group5.minY + 0.33486 * group5.height))
        bezier13Path.addLine(to: CGPoint(x: group5.minX + 0.40134 * group5.width, y: group5.minY + 0.34217 * group5.height))
        bezier13Path.addCurve(to: CGPoint(x: group5.minX + 0.39651 * group5.width, y: group5.minY + 0.34673 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.40171 * group5.width, y: group5.minY + 0.34445 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.39948 * group5.width, y: group5.minY + 0.34628 * group5.height))
        bezier13Path.close()
        fillColor16.setFill()
        bezier13Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: group5.minX + fastFloor(group5.width * 0.07567 + 0.1) + 0.4, y: group5.minY + fastFloor(group5.height * 0.36683 - 0.1) + 0.6, width: fastFloor(group5.width * 0.11128 - 0.5) - fastFloor(group5.width * 0.07567 + 0.1) + 0.6, height: fastFloor(group5.height * 0.38876 + 0.3) - fastFloor(group5.height * 0.36683 - 0.1) - 0.4))
        fillColor16.setFill()
        oval4Path.fill()


        //// Label Drawing
        let labelRect = CGRect(x: group5.minX + fastFloor(group5.width * 0.34674 + 0.02) + 0.48, y: group5.minY + fastFloor(group5.height * 0.79293 + 0.36) + 0.14, width: fastFloor(group5.width * 0.54154 + 0.5) - fastFloor(group5.width * 0.34674 + 0.02) - 0.48, height: fastFloor(group5.height * 0.84468 - 0.3) - fastFloor(group5.height * 0.79293 + 0.36) + 0.66)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [
            .font: UIFont(name: "GillSans", size: 16)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedString.Key: Any]

        "Sweet! ".draw(in: labelRect, withAttributes: labelFontAttributes)


        //// Label 2 Drawing
        let label2Rect = CGRect(x: group5.minX + fastFloor(group5.width * 0.00000 + 0.5), y: group5.minY + fastFloor(group5.height * 0.86752 - 0.3) + 0.8, width: fastFloor(group5.width * 0.91988 + 0.5) - fastFloor(group5.width * 0.00000 + 0.5), height: fastFloor(group5.height * 1.00000 - 0.3) - fastFloor(group5.height * 0.86752 - 0.3))
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [
            .font: UIFont(name: "GillSans", size: 16)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedString.Key: Any]

        "Youâll be the first to post in this area!\nThat means you can be the most\npopular user in this area!".draw(in: label2Rect, withAttributes: label2FontAttributes)


        //// Label 5 Drawing
        let label5Rect = CGRect(x: group5.minX + fastFloor(group5.width * 0.27212 + 0.14) + 0.36, y: group5.minY + fastFloor(group5.height * 0.21961 + 0.36) + 0.14, width: fastFloor(group5.width * 0.63056 + 0.5) - fastFloor(group5.width * 0.27212 + 0.14) - 0.36, height: fastFloor(group5.height * 0.27136 - 0.3) - fastFloor(group5.height * 0.21961 + 0.36) + 0.66)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .center
        let label5FontAttributes = [
            .font: UIFont(name: "GillSans", size: 16)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label5Style,
            ] as [NSAttributedString.Key: Any]

        "Tag this place".draw(in: label5Rect, withAttributes: label5FontAttributes)


        //// Group 4
        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: group5.minX + 0.66135 * group5.width, y: group5.minY + 0.24692 * group5.height))
        bezier14Path.addCurve(to: CGPoint(x: group5.minX + 0.89022 * group5.width, y: group5.minY + 0.16286 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.68435 * group5.width, y: group5.minY + 0.24623 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.80170 * group5.width, y: group5.minY + 0.24052 * group5.height))
        bezier14Path.addCurve(to: CGPoint(x: group5.minX + 0.97408 * group5.width, y: group5.minY + 0.00000 * group5.height), controlPoint1: CGPoint(x: group5.minX + 0.96448 * group5.width, y: group5.minY + 0.09776 * group5.height), controlPoint2: CGPoint(x: group5.minX + 0.97263 * group5.width, y: group5.minY + 0.02238 * group5.height))
        strokeColor4.setStroke()
        bezier14Path.lineWidth = 1
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: group5.minX + 0.97408 * group5.width, y: group5.minY + 0.00000 * group5.height))
        bezier15Path.addLine(to: CGPoint(x: group5.minX + 0.93827 * group5.width, y: group5.minY + 0.03084 * group5.height))
        strokeColor4.setStroke()
        bezier15Path.lineWidth = 1
        bezier15Path.stroke()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: group5.minX + 1.00000 * group5.width, y: group5.minY + 0.03655 * group5.height))
        bezier16Path.addLine(to: CGPoint(x: group5.minX + 0.97408 * group5.width, y: group5.minY + 0.00000 * group5.height))
        strokeColor4.setStroke()
        bezier16Path.lineWidth = 1
        bezier16Path.stroke()
    }

    @objc dynamic public class func drawRefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.235, green: 0.259, blue: 0.318, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 39.49, y: 20.9))
        bezierPath.addCurve(to: CGPoint(x: 38.58, y: 21.08), controlPoint1: CGPoint(x: 39.14, y: 20.75), controlPoint2: CGPoint(x: 38.83, y: 20.81))
        bezierPath.addLine(to: CGPoint(x: 36.89, y: 22.76))
        bezierPath.addCurve(to: CGPoint(x: 33.7, y: 20.73), controlPoint1: CGPoint(x: 35.96, y: 21.89), controlPoint2: CGPoint(x: 34.9, y: 21.21))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 20), controlPoint1: CGPoint(x: 32.51, y: 20.24), controlPoint2: CGPoint(x: 31.28, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 26.12, y: 20.8), controlPoint1: CGPoint(x: 28.65, y: 20), controlPoint2: CGPoint(x: 27.35, y: 20.27))
        bezierPath.addCurve(to: CGPoint(x: 22.93, y: 22.93), controlPoint1: CGPoint(x: 24.89, y: 21.33), controlPoint2: CGPoint(x: 23.82, y: 22.04))
        bezierPath.addCurve(to: CGPoint(x: 20.79, y: 26.12), controlPoint1: CGPoint(x: 22.04, y: 23.83), controlPoint2: CGPoint(x: 21.32, y: 24.89))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 30), controlPoint1: CGPoint(x: 20.26, y: 27.36), controlPoint2: CGPoint(x: 20, y: 28.65))
        bezierPath.addCurve(to: CGPoint(x: 20.79, y: 33.88), controlPoint1: CGPoint(x: 20, y: 31.36), controlPoint2: CGPoint(x: 20.26, y: 32.65))
        bezierPath.addCurve(to: CGPoint(x: 22.93, y: 37.07), controlPoint1: CGPoint(x: 21.32, y: 35.12), controlPoint2: CGPoint(x: 22.04, y: 36.18))
        bezierPath.addCurve(to: CGPoint(x: 26.12, y: 39.21), controlPoint1: CGPoint(x: 23.82, y: 37.97), controlPoint2: CGPoint(x: 24.89, y: 38.68))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 40), controlPoint1: CGPoint(x: 27.35, y: 39.74), controlPoint2: CGPoint(x: 28.65, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 34.26, y: 39.06), controlPoint1: CGPoint(x: 31.49, y: 40), controlPoint2: CGPoint(x: 32.91, y: 39.69))
        bezierPath.addCurve(to: CGPoint(x: 37.7, y: 36.4), controlPoint1: CGPoint(x: 35.6, y: 38.43), controlPoint2: CGPoint(x: 36.75, y: 37.54))
        bezierPath.addCurve(to: CGPoint(x: 37.79, y: 36.1), controlPoint1: CGPoint(x: 37.76, y: 36.31), controlPoint2: CGPoint(x: 37.8, y: 36.21))
        bezierPath.addCurve(to: CGPoint(x: 37.67, y: 35.84), controlPoint1: CGPoint(x: 37.79, y: 35.99), controlPoint2: CGPoint(x: 37.75, y: 35.91))
        bezierPath.addLine(to: CGPoint(x: 35.89, y: 34.04))
        bezierPath.addCurve(to: CGPoint(x: 35.56, y: 33.92), controlPoint1: CGPoint(x: 35.79, y: 33.96), controlPoint2: CGPoint(x: 35.68, y: 33.92))
        bezierPath.addCurve(to: CGPoint(x: 35.26, y: 34.08), controlPoint1: CGPoint(x: 35.42, y: 33.94), controlPoint2: CGPoint(x: 35.32, y: 33.99))
        bezierPath.addCurve(to: CGPoint(x: 32.93, y: 35.99), controlPoint1: CGPoint(x: 34.63, y: 34.9), controlPoint2: CGPoint(x: 33.85, y: 35.54))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 36.67), controlPoint1: CGPoint(x: 32.01, y: 36.44), controlPoint2: CGPoint(x: 31.03, y: 36.67))
        bezierPath.addCurve(to: CGPoint(x: 27.42, y: 36.14), controlPoint1: CGPoint(x: 29.1, y: 36.67), controlPoint2: CGPoint(x: 28.24, y: 36.49))
        bezierPath.addCurve(to: CGPoint(x: 25.29, y: 34.72), controlPoint1: CGPoint(x: 26.6, y: 35.79), controlPoint2: CGPoint(x: 25.89, y: 35.32))
        bezierPath.addCurve(to: CGPoint(x: 23.86, y: 32.59), controlPoint1: CGPoint(x: 24.69, y: 34.12), controlPoint2: CGPoint(x: 24.21, y: 33.41))
        bezierPath.addCurve(to: CGPoint(x: 23.33, y: 30), controlPoint1: CGPoint(x: 23.51, y: 31.77), controlPoint2: CGPoint(x: 23.33, y: 30.91))
        bezierPath.addCurve(to: CGPoint(x: 23.86, y: 27.42), controlPoint1: CGPoint(x: 23.33, y: 29.1), controlPoint2: CGPoint(x: 23.51, y: 28.24))
        bezierPath.addCurve(to: CGPoint(x: 25.29, y: 25.29), controlPoint1: CGPoint(x: 24.21, y: 26.6), controlPoint2: CGPoint(x: 24.69, y: 25.89))
        bezierPath.addCurve(to: CGPoint(x: 27.42, y: 23.86), controlPoint1: CGPoint(x: 25.89, y: 24.69), controlPoint2: CGPoint(x: 26.6, y: 24.22))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 23.34), controlPoint1: CGPoint(x: 28.24, y: 23.51), controlPoint2: CGPoint(x: 29.1, y: 23.34))
        bezierPath.addCurve(to: CGPoint(x: 34.54, y: 25.12), controlPoint1: CGPoint(x: 31.75, y: 23.34), controlPoint2: CGPoint(x: 33.26, y: 23.93))
        bezierPath.addLine(to: CGPoint(x: 32.75, y: 26.92))
        bezierPath.addCurve(to: CGPoint(x: 32.57, y: 27.82), controlPoint1: CGPoint(x: 32.48, y: 27.18), controlPoint2: CGPoint(x: 32.42, y: 27.48))
        bezierPath.addCurve(to: CGPoint(x: 33.33, y: 28.34), controlPoint1: CGPoint(x: 32.71, y: 28.16), controlPoint2: CGPoint(x: 32.97, y: 28.34))
        bezierPath.addLine(to: CGPoint(x: 39.17, y: 28.34))
        bezierPath.addCurve(to: CGPoint(x: 39.75, y: 28.09), controlPoint1: CGPoint(x: 39.39, y: 28.34), controlPoint2: CGPoint(x: 39.59, y: 28.25))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 27.5), controlPoint1: CGPoint(x: 39.92, y: 27.92), controlPoint2: CGPoint(x: 40, y: 27.73))
        bezierPath.addLine(to: CGPoint(x: 40, y: 21.67))
        bezierPath.addCurve(to: CGPoint(x: 39.49, y: 20.9), controlPoint1: CGPoint(x: 40, y: 21.31), controlPoint2: CGPoint(x: 39.83, y: 21.05))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlockUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let fillColor17 = UIColor(red: 0.847, green: 0.000, blue: 0.153, alpha: 1.000)

        //// do-not-disturb-rounded-sign.svg Group
        //// Group 2
        //// do-not-disturb
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29.5, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 30.5), controlPoint1: CGPoint(x: 19.88, y: 13), controlPoint2: CGPoint(x: 12, y: 20.88))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 48), controlPoint1: CGPoint(x: 12, y: 40.12), controlPoint2: CGPoint(x: 19.88, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 47, y: 30.5), controlPoint1: CGPoint(x: 39.12, y: 48), controlPoint2: CGPoint(x: 47, y: 40.12))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 13), controlPoint1: CGPoint(x: 47, y: 20.88), controlPoint2: CGPoint(x: 39.12, y: 13))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.5, y: 30.5))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 16.5), controlPoint1: CGPoint(x: 15.5, y: 22.8), controlPoint2: CGPoint(x: 21.8, y: 16.5))
        bezierPath.addCurve(to: CGPoint(x: 38.08, y: 19.47), controlPoint1: CGPoint(x: 32.65, y: 16.5), controlPoint2: CGPoint(x: 35.62, y: 17.55))
        bezierPath.addLine(to: CGPoint(x: 18.47, y: 39.08))
        bezierPath.addCurve(to: CGPoint(x: 15.5, y: 30.5), controlPoint1: CGPoint(x: 16.55, y: 36.63), controlPoint2: CGPoint(x: 15.5, y: 33.65))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 29.5, y: 44.5))
        bezierPath.addCurve(to: CGPoint(x: 20.92, y: 41.53), controlPoint1: CGPoint(x: 26.35, y: 44.5), controlPoint2: CGPoint(x: 23.38, y: 43.45))
        bezierPath.addLine(to: CGPoint(x: 40.52, y: 21.93))
        bezierPath.addCurve(to: CGPoint(x: 43.5, y: 30.5), controlPoint1: CGPoint(x: 42.45, y: 24.38), controlPoint2: CGPoint(x: 43.5, y: 27.35))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 44.5), controlPoint1: CGPoint(x: 43.5, y: 38.2), controlPoint2: CGPoint(x: 37.2, y: 44.5))
        bezierPath.close()
        fillColor17.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc(GraffitiStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
